/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 1

/* Pull parsers.  */
#define YYPULL 1

/* Substitute the type names.  */
#define YYSTYPE         OCTAVE_STYPE
/* Substitute the variable and function names.  */
#define yyparse         octave_parse
#define yypush_parse    octave_push_parse
#define yypull_parse    octave_pull_parse
#define yypstate_new    octave_pstate_new
#define yypstate_delete octave_pstate_delete
#define yypstate        octave_pstate
#define yylex           octave_lex
#define yyerror         octave_error
#define yydebug         octave_debug
#define yynerrs         octave_nerrs


/* Copy the first part of user declarations.  */
#line 30 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:339  */


#define YYDEBUG 1

#if defined (HAVE_CONFIG_H)
#  include "config.h"
#endif

#include <cassert>
#include <cstdio>
#include <cstdlib>

#include <iostream>
#include <map>
#include <sstream>

#include "Matrix.h"
#include "cmd-edit.h"
#include "cmd-hist.h"
#include "file-ops.h"
#include "file-stat.h"
#include "oct-env.h"
#include "oct-time.h"
#include "quit.h"

#include "Cell.h"
#include "builtin-defun-decls.h"
#include "call-stack.h"
#include "defaults.h"
#include "defun.h"
#include "dirfns.h"
#include "dynamic-ld.h"
#include "error.h"
#include "input.h"
#include "interpreter-private.h"
#include "interpreter.h"
#include "lex.h"
#include "load-path.h"
#include "oct-hist.h"
#include "oct-map.h"
#include "ov-classdef.h"
#include "ov-fcn-handle.h"
#include "ov-usr-fcn.h"
#include "ov-null-mat.h"
#include "pager.h"
#include "parse.h"
#include "pt-all.h"
#include "pt-eval.h"
#include "pt-funcall.h"
#include "symtab.h"
#include "token.h"
#include "unwind-prot.h"
#include "utils.h"
#include "variables.h"

// oct-parse.h must be included after pt-all.h
#include "oct-parse.h"

extern int octave_lex (YYSTYPE *, void *);

// List of autoloads (function -> file mapping).
static std::map<std::string, std::string> autoload_map;

// Forward declarations for some functions defined at the bottom of
// the file.

static void yyerror (octave::base_parser& parser, const char *s);

#define lexer parser.m_lexer
#define scanner lexer.m_scanner

#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
   // Disable this warning for code that is generated by Bison,
   // including grammar rules.  Push the current state so we can
   // restore the warning state prior to functions we define at
   // the bottom of the file.
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wold-style-cast"
#endif


#line 160 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "y.tab.h".  */
#ifndef YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED
# define YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED
/* Debug traces.  */
#ifndef OCTAVE_DEBUG
# if defined YYDEBUG
#if YYDEBUG
#   define OCTAVE_DEBUG 1
#  else
#   define OCTAVE_DEBUG 0
#  endif
# else /* ! defined YYDEBUG */
#  define OCTAVE_DEBUG 0
# endif /* ! defined YYDEBUG */
#endif  /* ! defined OCTAVE_DEBUG */
#if OCTAVE_DEBUG
extern int octave_debug;
#endif

/* Token type.  */
#ifndef OCTAVE_TOKENTYPE
# define OCTAVE_TOKENTYPE
  enum octave_tokentype
  {
    ADD_EQ = 258,
    SUB_EQ = 259,
    MUL_EQ = 260,
    DIV_EQ = 261,
    LEFTDIV_EQ = 262,
    POW_EQ = 263,
    EMUL_EQ = 264,
    EDIV_EQ = 265,
    ELEFTDIV_EQ = 266,
    EPOW_EQ = 267,
    AND_EQ = 268,
    OR_EQ = 269,
    EXPR_AND_AND = 270,
    EXPR_OR_OR = 271,
    EXPR_AND = 272,
    EXPR_OR = 273,
    EXPR_NOT = 274,
    EXPR_LT = 275,
    EXPR_LE = 276,
    EXPR_EQ = 277,
    EXPR_NE = 278,
    EXPR_GE = 279,
    EXPR_GT = 280,
    LEFTDIV = 281,
    EMUL = 282,
    EDIV = 283,
    ELEFTDIV = 284,
    EPLUS = 285,
    EMINUS = 286,
    HERMITIAN = 287,
    TRANSPOSE = 288,
    PLUS_PLUS = 289,
    MINUS_MINUS = 290,
    POW = 291,
    EPOW = 292,
    NUM = 293,
    IMAG_NUM = 294,
    STRUCT_ELT = 295,
    NAME = 296,
    END = 297,
    DQ_STRING = 298,
    SQ_STRING = 299,
    FOR = 300,
    PARFOR = 301,
    WHILE = 302,
    DO = 303,
    UNTIL = 304,
    IF = 305,
    ELSEIF = 306,
    ELSE = 307,
    SWITCH = 308,
    CASE = 309,
    OTHERWISE = 310,
    BREAK = 311,
    CONTINUE = 312,
    FUNC_RET = 313,
    UNWIND = 314,
    CLEANUP = 315,
    TRY = 316,
    CATCH = 317,
    GLOBAL = 318,
    PERSISTENT = 319,
    FCN_HANDLE = 320,
    CLASSDEF = 321,
    PROPERTIES = 322,
    METHODS = 323,
    EVENTS = 324,
    ENUMERATION = 325,
    METAQUERY = 326,
    SUPERCLASSREF = 327,
    FQ_IDENT = 328,
    GET = 329,
    SET = 330,
    FCN = 331,
    LEXICAL_ERROR = 332,
    END_OF_INPUT = 333,
    INPUT_FILE = 334,
    UNARY = 335
  };
#endif
/* Tokens.  */
#define ADD_EQ 258
#define SUB_EQ 259
#define MUL_EQ 260
#define DIV_EQ 261
#define LEFTDIV_EQ 262
#define POW_EQ 263
#define EMUL_EQ 264
#define EDIV_EQ 265
#define ELEFTDIV_EQ 266
#define EPOW_EQ 267
#define AND_EQ 268
#define OR_EQ 269
#define EXPR_AND_AND 270
#define EXPR_OR_OR 271
#define EXPR_AND 272
#define EXPR_OR 273
#define EXPR_NOT 274
#define EXPR_LT 275
#define EXPR_LE 276
#define EXPR_EQ 277
#define EXPR_NE 278
#define EXPR_GE 279
#define EXPR_GT 280
#define LEFTDIV 281
#define EMUL 282
#define EDIV 283
#define ELEFTDIV 284
#define EPLUS 285
#define EMINUS 286
#define HERMITIAN 287
#define TRANSPOSE 288
#define PLUS_PLUS 289
#define MINUS_MINUS 290
#define POW 291
#define EPOW 292
#define NUM 293
#define IMAG_NUM 294
#define STRUCT_ELT 295
#define NAME 296
#define END 297
#define DQ_STRING 298
#define SQ_STRING 299
#define FOR 300
#define PARFOR 301
#define WHILE 302
#define DO 303
#define UNTIL 304
#define IF 305
#define ELSEIF 306
#define ELSE 307
#define SWITCH 308
#define CASE 309
#define OTHERWISE 310
#define BREAK 311
#define CONTINUE 312
#define FUNC_RET 313
#define UNWIND 314
#define CLEANUP 315
#define TRY 316
#define CATCH 317
#define GLOBAL 318
#define PERSISTENT 319
#define FCN_HANDLE 320
#define CLASSDEF 321
#define PROPERTIES 322
#define METHODS 323
#define EVENTS 324
#define ENUMERATION 325
#define METAQUERY 326
#define SUPERCLASSREF 327
#define FQ_IDENT 328
#define GET 329
#define SET 330
#define FCN 331
#define LEXICAL_ERROR 332
#define END_OF_INPUT 333
#define INPUT_FILE 334
#define UNARY 335

/* Value type.  */
#if ! defined OCTAVE_STYPE && ! defined OCTAVE_STYPE_IS_DECLARED

union OCTAVE_STYPE
{
#line 136 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:355  */

  int dummy_type;

  // The type of the basic tokens returned by the lexer.
  octave::token *tok_val;

  // Comment strings that we need to deal with mid-rule.
  octave::comment_list *comment_type;

  // Types for the nonterminals we generate.
  char punct_type;
  octave::tree *tree_type;
  octave::tree_matrix *tree_matrix_type;
  octave::tree_cell *tree_cell_type;
  octave::tree_expression *tree_expression_type;
  octave::tree_constant *tree_constant_type;
  octave::tree_fcn_handle *tree_fcn_handle_type;
  octave::tree_funcall *tree_funcall_type;
  octave::tree_function_def *tree_function_def_type;
  octave::tree_anon_fcn_handle *tree_anon_fcn_handle_type;
  octave::tree_identifier *tree_identifier_type;
  octave::tree_index_expression *tree_index_expression_type;
  octave::tree_colon_expression *tree_colon_expression_type;
  octave::tree_argument_list *tree_argument_list_type;
  octave::tree_parameter_list *tree_parameter_list_type;
  octave::tree_command *tree_command_type;
  octave::tree_if_command *tree_if_command_type;
  octave::tree_if_clause *tree_if_clause_type;
  octave::tree_if_command_list *tree_if_command_list_type;
  octave::tree_switch_command *tree_switch_command_type;
  octave::tree_switch_case *tree_switch_case_type;
  octave::tree_switch_case_list *tree_switch_case_list_type;
  octave::tree_decl_elt *tree_decl_elt_type;
  octave::tree_decl_init_list *tree_decl_init_list_type;
  octave::tree_decl_command *tree_decl_command_type;
  octave::tree_statement *tree_statement_type;
  octave::tree_statement_list *tree_statement_list_type;
  octave_user_function *octave_user_function_type;

  octave::tree_classdef *tree_classdef_type;
  octave::tree_classdef_attribute* tree_classdef_attribute_type;
  octave::tree_classdef_attribute_list* tree_classdef_attribute_list_type;
  octave::tree_classdef_superclass* tree_classdef_superclass_type;
  octave::tree_classdef_superclass_list* tree_classdef_superclass_list_type;
  octave::tree_classdef_body* tree_classdef_body_type;
  octave::tree_classdef_property* tree_classdef_property_type;
  octave::tree_classdef_property_list* tree_classdef_property_list_type;
  octave::tree_classdef_properties_block* tree_classdef_properties_block_type;
  octave::tree_classdef_methods_list* tree_classdef_methods_list_type;
  octave::tree_classdef_methods_block* tree_classdef_methods_block_type;
  octave::tree_classdef_event* tree_classdef_event_type;
  octave::tree_classdef_events_list* tree_classdef_events_list_type;
  octave::tree_classdef_events_block* tree_classdef_events_block_type;
  octave::tree_classdef_enum* tree_classdef_enum_type;
  octave::tree_classdef_enum_list* tree_classdef_enum_list_type;
  octave::tree_classdef_enum_block* tree_classdef_enum_block_type;

#line 426 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:355  */
};

typedef union OCTAVE_STYPE OCTAVE_STYPE;
# define OCTAVE_STYPE_IS_TRIVIAL 1
# define OCTAVE_STYPE_IS_DECLARED 1
#endif



#ifndef YYPUSH_MORE_DEFINED
# define YYPUSH_MORE_DEFINED
enum { YYPUSH_MORE = 4 };
#endif

typedef struct octave_pstate octave_pstate;

int octave_parse (octave::base_parser& parser);
int octave_push_parse (octave_pstate *ps, int pushed_char, OCTAVE_STYPE const *pushed_val, octave::base_parser& parser);
int octave_pull_parse (octave_pstate *ps, octave::base_parser& parser);
octave_pstate * octave_pstate_new (void);
void octave_pstate_delete (octave_pstate *ps);

#endif /* !YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 453 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined OCTAVE_STYPE_IS_TRIVIAL && OCTAVE_STYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  108
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1567

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  98
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  110
/* YYNRULES -- Number of rules.  */
#define YYNRULES  287
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  529

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   335

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      86,    87,     7,     6,    93,     5,    92,     8,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     4,    94,
       2,     3,     2,     2,    95,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    88,     2,    89,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    90,     2,    91,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    97
};

#if OCTAVE_DEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   385,   385,   391,   398,   405,   411,   415,   417,   422,
     423,   427,   431,   433,   438,   439,   443,   451,   456,   463,
     465,   467,   479,   490,   492,   503,   511,   520,   528,   530,
     534,   536,   538,   542,   546,   548,   562,   566,   568,   587,
     588,   590,   592,   594,   596,   600,   607,   612,   622,   624,
     626,   628,   633,   635,   637,   639,   643,   652,   660,   662,
     664,   666,   671,   676,   683,   690,   692,   694,   696,   705,
     714,   723,   732,   734,   736,   738,   740,   742,   744,   746,
     748,   750,   752,   754,   756,   758,   760,   762,   764,   766,
     768,   770,   772,   776,   778,   780,   782,   791,   800,   809,
     818,   820,   822,   824,   826,   828,   830,   834,   846,   861,
     863,   865,   867,   869,   871,   873,   875,   877,   879,   881,
     883,   887,   901,   903,   905,   907,   909,   911,   913,   915,
     917,   919,   921,   923,   925,   929,   944,   948,   950,   962,
     964,   966,   968,   970,   972,   974,   982,   987,   994,   996,
    1004,  1009,  1011,  1024,  1026,  1034,  1044,  1046,  1053,  1061,
    1068,  1079,  1092,  1105,  1106,  1108,  1110,  1117,  1119,  1126,
    1135,  1148,  1160,  1167,  1179,  1191,  1203,  1221,  1226,  1228,
    1236,  1249,  1262,  1280,  1311,  1326,  1335,  1336,  1340,  1347,
    1356,  1357,  1374,  1376,  1383,  1385,  1393,  1399,  1417,  1434,
    1436,  1449,  1453,  1462,  1466,  1495,  1513,  1522,  1552,  1561,
    1572,  1585,  1621,  1628,  1642,  1657,  1670,  1686,  1687,  1691,
    1693,  1700,  1702,  1709,  1719,  1720,  1725,  1724,  1733,  1732,
    1745,  1749,  1751,  1753,  1755,  1757,  1764,  1771,  1778,  1788,
    1800,  1814,  1816,  1825,  1827,  1836,  1848,  1862,  1867,  1874,
    1877,  1876,  1891,  1893,  1897,  1905,  1919,  1931,  1944,  1946,
    1955,  1959,  1971,  1984,  1986,  1995,  2004,  2011,  2014,  2020,
    2024,  2026,  2028,  2030,  2035,  2036,  2041,  2042,  2046,  2048,
    2052,  2054,  2056,  2058,  2060,  2062,  2067,  2068
};
#endif

#if OCTAVE_DEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "'='", "':'", "'-'", "'+'", "'*'", "'/'",
  "ADD_EQ", "SUB_EQ", "MUL_EQ", "DIV_EQ", "LEFTDIV_EQ", "POW_EQ",
  "EMUL_EQ", "EDIV_EQ", "ELEFTDIV_EQ", "EPOW_EQ", "AND_EQ", "OR_EQ",
  "EXPR_AND_AND", "EXPR_OR_OR", "EXPR_AND", "EXPR_OR", "EXPR_NOT",
  "EXPR_LT", "EXPR_LE", "EXPR_EQ", "EXPR_NE", "EXPR_GE", "EXPR_GT",
  "LEFTDIV", "EMUL", "EDIV", "ELEFTDIV", "EPLUS", "EMINUS", "HERMITIAN",
  "TRANSPOSE", "PLUS_PLUS", "MINUS_MINUS", "POW", "EPOW", "NUM",
  "IMAG_NUM", "STRUCT_ELT", "NAME", "END", "DQ_STRING", "SQ_STRING", "FOR",
  "PARFOR", "WHILE", "DO", "UNTIL", "IF", "ELSEIF", "ELSE", "SWITCH",
  "CASE", "OTHERWISE", "BREAK", "CONTINUE", "FUNC_RET", "UNWIND",
  "CLEANUP", "TRY", "CATCH", "GLOBAL", "PERSISTENT", "FCN_HANDLE",
  "CLASSDEF", "PROPERTIES", "METHODS", "EVENTS", "ENUMERATION",
  "METAQUERY", "SUPERCLASSREF", "FQ_IDENT", "GET", "SET", "FCN",
  "LEXICAL_ERROR", "END_OF_INPUT", "INPUT_FILE", "'('", "')'", "'['",
  "']'", "'{'", "'}'", "'.'", "','", "';'", "'@'", "'\\n'", "UNARY",
  "$accept", "input", "simple_list", "simple_list1", "opt_list", "list",
  "list1", "opt_fcn_list", "fcn_list", "fcn_list1", "statement",
  "word_list_cmd", "word_list", "identifier", "superclass_identifier",
  "meta_identifier", "string", "constant", "matrix", "matrix_rows", "cell",
  "cell_rows", "cell_or_matrix_row", "fcn_handle", "anon_fcn_handle",
  "primary_expr", "magic_colon", "magic_tilde", "arg_list",
  "indirect_ref_op", "oper_expr", "power_expr", "colon_expr",
  "simple_expr", "assign_lhs", "assign_expr", "expr_no_assign",
  "expression", "command", "declaration", "decl1", "decl_param_init",
  "decl2", "select_command", "if_command", "if_cmd_list", "if_cmd_list1",
  "elseif_clause", "else_clause", "switch_command", "case_list",
  "case_list1", "switch_case", "default_case", "loop_command",
  "jump_command", "except_command", "push_fcn_symtab", "param_list_beg",
  "param_list_end", "opt_param_list", "param_list", "param_list1",
  "param_list2", "param_list_elt", "return_list", "return_list1",
  "parsing_local_fcns", "push_script_symtab", "begin_file", "file",
  "function_beg", "fcn_name", "function_end", "function", "classdef_beg",
  "classdef", "opt_attr_list", "attr_list", "attr", "opt_superclass_list",
  "superclass_list", "$@1", "$@2", "superclass", "class_body",
  "properties_block", "property_list", "class_property", "methods_block",
  "method_decl1", "method_decl", "$@3", "method", "methods_list",
  "events_block", "events_list", "class_event", "enum_block", "enum_list",
  "class_enum", "stmt_begin", "stash_comment", "parse_error", "sep_no_nl",
  "opt_sep_no_nl", "opt_nl", "nl", "sep", "opt_sep", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,    61,    58,    45,    43,    42,    47,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    40,    41,    91,    93,
     123,   125,    46,    44,    59,    64,    10,   335
};
# endif

#define YYPACT_NINF -400

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-400)))

#define YYTABLE_NINF -275

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     509,  -400,  1171,  1171,  1171,  1171,  1171,  -400,  -400,  -400,
    -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,  -400,    23,    23,  -400,  -400,  -400,  1192,   699,
     699,  -400,  -400,   -27,    15,   -36,    73,  -400,  -400,   131,
    -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  1389,
    -400,  1516,   527,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,  -400,  -400,     1,    58,    51,  -400,  -400,  -400,
    -400,    95,  -400,    92,  -400,   284,   284,   284,   284,   284,
    1248,  1269,  1192,   180,  1192,  1192,   180,   180,   151,    23,
    -400,    23,    -1,  -400,  1171,   909,    -2,  -400,  -400,  -400,
      85,  -400,    57,  -400,  -400,  -400,    21,  -400,  -400,  -400,
    -400,   971,  -400,   131,  -400,  1171,  1171,  1171,  1171,  1171,
    1171,  1171,  1171,  1171,  1171,  1171,  -400,  -400,  -400,  -400,
    1325,  1325,   725,   791,  -400,   -33,  1171,  1171,  1171,  1171,
    1171,  1171,  1171,  1171,  1171,  1171,  1192,  1192,  1192,  1192,
    1192,  1192,  1192,  1192,  1192,  1192,  1192,  1192,  1192,  -400,
    -400,  -400,  1037,    80,    65,  -400,  -400,  1192,   363,   187,
    1192,   214,  -400,  -400,  -400,  -400,   200,  1105,  -400,   176,
     155,   180,  1105,  1105,  -400,  -400,  -400,   141,  -400,   699,
     909,  -400,   699,  -400,  -400,  -400,  -400,   162,   154,  -400,
     576,  -400,  -400,  1401,  1475,  1475,   284,   284,   284,   284,
     284,   284,  1475,  1475,  1325,  1325,  1325,  1325,  1325,  -400,
      83,    83,  -400,   -52,  -400,    16,  -400,  1192,   439,   407,
     414,   241,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,   168,  -400,   180,  -400,  -400,  -400,  -400,   167,
     193,   -40,   285,   288,   216,   630,  1192,   742,  1192,   180,
    -400,  -400,  -400,   248,   180,  -400,  -400,  -400,  -400,  -400,
     172,   239,    36,  1192,   909,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,    14,  -400,   363,  -400,  1171,    83,    83,    83,
      83,    83,  -400,  -400,   817,   883,   -10,  -400,   909,  -400,
     220,  -400,   632,  -400,   224,   180,    23,    23,  -400,  -400,
      27,    -7,   180,  -400,  1192,  -400,  1192,  -400,  1105,  1192,
    1105,   180,   180,  -400,  -400,   265,   172,  -400,  -400,  -400,
    -400,  -400,  -400,  -400,  1462,  -400,   -35,  -400,    34,  -400,
    1192,  -400,  -400,    22,    23,   233,  -400,  -400,  -400,    23,
    -400,   216,  1105,   242,   180,   225,   180,   272,  -400,  -400,
    1192,  1105,   180,   180,  -400,  -400,  -400,   180,   180,  -400,
    -400,   244,    23,   330,   -22,  -400,   308,   251,  -400,   180,
    -400,  -400,   180,   -34,   180,  1105,  1192,  1105,  -400,  -400,
    -400,  1192,  1105,  1105,  1105,  -400,  -400,  -400,  -400,    22,
    -400,   180,   313,  -400,   233,  1105,  -400,  -400,  -400,  1105,
     292,   255,   296,   180,  -400,  -400,   298,   299,  1192,  -400,
     269,   111,  -400,  -400,   -34,   301,  -400,   180,  -400,  1105,
     180,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,   180,  -400,  -400,  -400,  -400,   269,  -400,  -400,  1105,
    -400,  1105,   224,   224,   224,   224,   170,  -400,   303,  -400,
     180,   180,   180,   180,  -400,  -400,  -400,  -400,  -400,  -400,
     210,     3,   215,   231,  -400,   352,   180,  -400,  -400,  -400,
    -400,  -400,   180,   -13,  -400,  -400,   180,  -400,  -400,   270,
     180,  -400,  -400,   160,   310,     8,    24,   357,  -400,   250,
    1192,   253,  1192,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,   274,  -400,  -400,  -400,    23,  -400,   216,  -400
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   269,     0,     0,     0,     0,     0,    30,    31,    25,
      28,    29,   267,   267,   267,   267,   267,   267,   177,   178,
     179,   267,   267,     0,     0,    27,    26,   268,     0,    39,
      39,   270,   271,     0,     0,     0,   274,     7,    21,    48,
      54,    53,    32,    49,    51,    52,    50,   136,    65,   109,
     110,   135,     0,   138,   137,    19,    20,   139,   140,   153,
     154,   141,   142,   143,     0,     0,   276,   145,   267,   144,
       4,   275,     5,     0,    48,    80,    79,    78,    76,    77,
       0,     0,     0,   286,     0,     0,   286,   286,   151,   146,
     148,   147,     0,    56,    57,    40,     0,    34,    59,    60,
      41,    58,     0,    37,    45,   184,     0,   266,     1,     3,
       2,   275,     6,    22,    23,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    72,    73,    66,    67,
       0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   206,
     203,   278,     9,   277,     0,   272,   273,     0,   121,     0,
       0,     0,   266,   280,   281,   282,   287,     9,   266,     0,
     156,   286,     9,     9,   150,   149,    55,    43,    33,    39,
      42,    36,    39,   189,    57,   195,   194,     0,   191,   192,
       0,     8,    24,   107,    84,    83,    85,    86,    91,    89,
      90,    92,    87,    88,     0,     0,     0,     0,     0,    93,
      81,    82,    68,     0,    70,     0,    74,     0,   119,   120,
     117,   118,   111,   112,   113,   116,   114,   115,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   214,     0,    10,   286,    12,   267,   201,   279,     0,
       0,     0,   207,     0,   186,     0,     0,     0,     0,   286,
     283,   284,   285,     0,   286,   155,   267,   267,   159,   157,
     163,     0,     0,     0,    44,    35,    61,    62,    63,    38,
     185,   188,     0,    47,   135,    46,     0,   106,   105,   104,
     102,   103,    94,    95,     0,     0,     0,    69,     0,    71,
       0,   204,   287,    11,   217,   286,     0,     0,   196,   199,
       0,     0,   286,   187,     0,   266,     0,   266,     9,     0,
       9,   286,   286,   267,   267,     0,   165,   167,   164,   267,
     182,   267,   152,   193,   108,    96,     0,    98,     0,   100,
       0,    75,    13,     0,     0,    14,   208,   209,   198,     0,
     207,   186,     9,     0,   286,   122,   286,     0,   172,   158,
       0,     9,   286,   286,   162,   168,   166,   286,   286,    97,
      99,     0,     0,   221,     0,   219,   224,     0,    15,   286,
      17,   200,   286,     0,   286,     9,     0,     9,   171,   266,
     161,     0,     9,     9,     9,   101,   223,   150,   218,     0,
     226,   286,   225,   205,    16,     9,   210,   211,   212,     9,
       0,     0,     0,   286,   266,   170,     0,     0,     0,   220,
       0,     0,   228,    18,     0,     0,   173,   286,   175,     9,
     286,   180,   181,   222,   230,   227,   216,   267,   267,   267,
     267,   286,   231,   232,   233,   234,     0,   213,   174,     9,
     160,     9,   217,   217,   217,   217,     0,   229,     0,   169,
     286,   286,   286,   286,   215,   235,   236,   237,   238,   176,
       0,   267,     0,     0,   240,   243,   286,   241,   246,   253,
     252,   254,   286,     0,   257,   260,   286,   258,   262,     0,
     286,   263,   150,   287,     0,   267,   247,     0,   249,     0,
       0,     0,     0,   242,   239,   245,   255,   248,   250,   256,
     259,     0,   261,   264,   244,     0,   265,   247,   251
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -400,  -400,  -400,  -400,  -120,  -400,  -400,  -400,  -400,  -400,
       2,  -400,  -400,     0,  -400,  -400,    -8,  -400,  -400,  -400,
    -400,  -400,   -24,  -400,  -400,   -12,  -158,   -73,   -90,   -60,
      76,    11,  -400,   -43,   -26,  -400,   163,   -18,  -400,  -400,
     340,  -399,   -61,  -400,  -400,  -400,  -400,  -400,  -400,  -400,
    -400,  -400,    29,    32,  -400,  -400,  -400,  -400,  -400,  -400,
      12,   -32,  -400,  -400,    77,  -118,  -400,  -400,  -400,  -400,
    -400,  -400,    56,   -55,  -326,  -400,  -400,  -242,  -400,   -29,
    -400,  -400,  -400,  -400,   -75,  -400,   -78,  -400,  -107,   -68,
    -125,  -400,  -400,  -100,  -400,   -50,  -400,  -103,   -49,  -400,
     -97,  -169,     4,  -400,   375,   382,  -400,  -400,  -250,    35
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    34,    35,    36,   252,   253,   254,   387,   388,   389,
     255,    38,   113,    74,    40,    41,    42,    43,    44,    96,
      45,   102,    97,    46,    47,    48,    98,    99,   100,   135,
      49,   220,    50,    51,    52,    53,    54,    55,    56,    57,
      89,   283,    90,    58,    59,   179,   180,   278,   279,    60,
     335,   336,   337,   338,    61,    62,    63,    64,   106,   291,
     322,   323,   197,   198,   199,   263,   320,   315,    65,    66,
      67,    68,   264,   418,    69,   256,   257,   354,   384,   385,
     411,   412,   430,   456,   445,   451,   452,   486,   487,   453,
     508,   490,   525,   491,   492,   454,   496,   497,   455,   500,
     501,   200,   493,    70,    71,    72,   162,   163,   176,   177
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      39,   107,    37,   269,   312,   187,   103,     9,   428,   274,
      92,   101,   101,   226,   416,   108,    80,    81,    82,    83,
      84,    85,   193,    88,    88,    86,    87,  -197,   185,   390,
     185,   114,   286,   195,     9,   307,   349,   168,   168,   194,
       9,   308,   223,   225,   104,   196,   194,   382,   109,   318,
     417,   488,   379,   227,   169,   171,   515,   273,   308,   105,
     110,     9,   281,   282,   172,   408,   178,   181,     9,     9,
       9,   409,   164,   259,   260,   261,   350,   101,    75,    76,
      77,    78,    79,   159,   340,  -183,   186,   188,   433,    88,
    -183,    88,   189,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   512,   341,   202,    88,   309,  -190,   308,
     105,    39,     9,   201,   101,   101,   358,   287,   219,   219,
     359,   182,   183,   302,   303,   380,   286,   308,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   265,   221,   160,   267,   259,   260,   161,   191,    92,
     286,   192,    92,   261,   184,   489,   364,   294,   366,   446,
     306,   306,    39,   104,   262,   285,    31,    32,   289,   304,
      77,   101,   288,   305,   101,   134,   258,    39,   190,   489,
      10,    11,    39,    39,   447,   448,   449,   450,   165,   166,
     266,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   219,   219,   219,   219,   219,     9,   367,   310,
     369,   287,   276,   277,   346,   348,   280,   268,   474,   195,
     470,   471,   472,   473,   275,   297,   298,   299,   300,   301,
     423,   196,   333,   334,   284,   287,   503,   306,   306,   306,
     306,   306,   393,   447,   448,   449,   450,   292,   325,   290,
     327,   400,   311,   270,   271,   440,   272,     9,   484,   316,
     314,   319,     9,   494,   138,   342,   288,   140,   141,   142,
     143,   144,   145,   173,   174,   420,   175,   422,     9,   498,
     331,   332,   425,   426,   427,   317,   101,   101,  -197,   313,
     288,   321,    88,   270,   271,   434,   272,     9,   519,   435,
       9,   522,   105,   329,   328,   339,   363,   351,   365,   330,
     353,   368,    39,   374,   352,  -183,   356,   357,   396,   460,
     398,   360,   126,   127,   128,   129,   130,   131,    39,   394,
      39,   405,   381,   407,   410,   413,   432,   372,   373,   468,
     436,   469,   437,   377,   438,   378,   441,   442,   444,   458,
     355,   479,   399,   383,   386,   502,   510,   362,   514,   391,
     518,   526,    39,   295,    91,   375,   370,   371,   376,   343,
     132,    39,   344,   392,   133,   507,   134,   361,   421,   457,
     429,   467,   406,   424,   136,   137,   138,   139,   475,   140,
     141,   142,   143,   144,   145,    39,   513,    39,   476,   395,
     528,   397,    39,    39,    39,   516,   520,   401,   402,   383,
     443,   111,   403,   404,   523,    39,   477,   478,   112,    39,
       0,     0,     0,     0,   414,     0,     0,   415,   136,   419,
     138,   139,     0,   140,   141,   142,   143,   144,   145,    39,
     140,   141,   142,   143,   144,   145,   431,     0,     0,     0,
       0,   462,   463,   464,   465,     0,     0,     0,   439,    39,
       0,    39,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   459,     0,   517,   461,     0,     0,     0,     0,
     485,     0,   495,   499,     0,     0,   466,     0,     0,     0,
       0,     0,   521,   506,   524,   517,     0,     0,     0,     0,
       0,     0,     0,   485,     0,   480,   481,   482,   483,   495,
       1,   499,     0,     0,     2,     3,     0,     0,     0,     0,
       0,   504,     0,     0,     0,   527,     0,   505,     0,     0,
     146,   509,     0,     0,     4,   511,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,     0,     5,
       6,     0,     0,     7,     8,     0,     9,     0,    10,    11,
      12,    13,    14,    15,     0,    16,     0,     0,    17,     0,
       0,    18,    19,    20,    21,     0,    22,   293,    23,    24,
       0,     2,     3,     0,     0,     0,    25,    26,     0,     0,
       0,  -183,    27,  -274,  -202,    28,     0,    29,     0,    30,
       0,     4,    31,    32,    33,  -274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     0,     0,
       7,     8,     0,     9,     0,    10,    11,     0,     0,     0,
       0,     0,     0,   324,     0,     0,     0,     2,     3,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,     0,     0,    25,    26,     0,     0,     4,     0,     0,
       0,     0,    28,     0,    29,     0,    30,     0,     0,     0,
       0,    33,     5,     6,     0,     0,     7,     8,     0,     9,
       0,    10,    11,    12,    13,    14,    15,     0,    16,     0,
       0,    17,     0,     0,    18,    19,    20,    21,     0,    22,
       0,    23,    24,    93,     2,     3,     0,     0,     0,    25,
      26,     0,     0,     0,  -183,     0,     0,  -202,    28,     0,
      29,     0,    30,     0,    94,   270,   271,    33,   272,    93,
       2,     3,     0,     0,     0,     0,     0,     0,     0,     5,
       6,     0,     0,     7,     8,   326,     9,     0,    10,    11,
      94,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,     0,     0,     5,     6,     0,     0,     7,
       8,     0,     9,     0,    10,    11,    25,    26,     0,     0,
       0,     0,     0,     0,     0,    28,     0,    29,     0,    30,
       0,     0,    95,     0,    33,    93,     2,     3,     0,     0,
       0,     0,    25,    26,     0,     0,     0,     0,     0,     0,
       0,    28,   222,    29,     0,    30,    94,     0,     0,     0,
      33,    93,     2,     3,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     0,     9,     0,
      10,    11,    94,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     7,     8,     0,     9,     0,    10,    11,    25,    26,
       0,     0,     0,     0,     0,     0,     0,    28,     0,    29,
       0,    30,   224,     0,     0,     0,    33,    93,     2,     3,
       0,     0,     0,     0,    25,    26,     0,     0,     0,     0,
       0,     0,     0,    28,   345,    29,     0,    30,    94,     0,
       0,     0,    33,    93,     2,     3,     0,     0,     0,     0,
       0,     0,     0,     5,     6,     0,     0,     7,     8,     0,
       9,     0,    10,    11,    94,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       6,     0,     0,     7,     8,     0,     9,     0,    10,    11,
      25,    26,     0,     0,     0,     0,     0,     0,     0,    28,
       0,    29,     0,    30,   347,     0,     2,     3,    33,     0,
       0,     0,     0,     0,     0,     0,    25,    26,     0,     0,
       0,     0,     0,     0,     0,    28,     4,    29,     0,    30,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     0,     9,     0,
      10,    11,    12,    13,    14,    15,     0,    16,     0,     0,
      17,     0,     0,    18,    19,    20,    21,     0,    22,     0,
      23,    24,     2,     3,     0,     0,     0,     0,    25,    26,
       0,     0,     0,  -183,     0,     0,  -202,    28,     0,    29,
       0,    30,     4,     0,   165,   166,    33,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     7,     8,     0,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,    17,     0,     0,    18,
      19,    20,    21,     0,    22,     0,    23,    24,     0,   251,
       2,     3,     0,     0,    25,    26,     0,     0,     0,  -183,
       0,     0,  -202,    28,     0,    29,     0,    30,     0,     0,
       4,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     6,     0,     0,     7,
       8,     0,     9,     0,    10,    11,    12,    13,    14,    15,
       0,    16,     0,     0,    17,     0,     0,    18,    19,    20,
      21,     0,    22,     0,    23,    24,     2,     3,     0,     0,
       0,     0,    25,    26,     0,     0,     0,  -183,     0,     0,
    -202,    28,     0,    29,     0,    30,     4,     2,     3,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     4,     9,     0,
      10,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     5,     6,     0,     0,     7,     8,     0,     9,
       0,    10,    11,     0,     0,     0,     0,     0,    25,    26,
       0,     0,     0,     2,     3,     0,     0,    28,     0,    29,
       0,    30,     0,     0,     0,     0,    73,     0,     0,    25,
      26,     0,     0,     4,     2,     3,     0,     0,    28,     0,
      29,     0,    30,     0,     0,     0,     0,    33,     5,     6,
       0,     0,     7,     8,     4,     9,     0,    10,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       6,     0,     0,     7,     8,     0,     9,     0,    10,    11,
       0,     0,     0,     0,     0,    25,    26,     0,     0,     0,
     214,   215,     0,     0,   167,     0,    29,     0,    30,     0,
       0,     0,     0,    73,     0,     0,    25,    26,     0,     0,
     216,     0,     0,     0,     0,   170,     0,    29,     0,    30,
       0,     0,     0,     0,    73,   217,   218,     0,     0,     7,
       8,     0,     9,     0,    10,    11,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   115,   116,   117,   118,   119,     0,     0,
       0,     0,    25,    26,     0,   296,   116,   117,   118,   119,
       0,    28,     0,    29,     0,    30,     0,     0,     0,     0,
      73,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   116,   117,   118,
     119,     0,     0,     0,     0,   132,     0,     0,     0,   133,
       0,   134,   118,   119,     0,     0,     0,   132,     0,     0,
       0,   133,     0,   134,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,     0,   120,   121,   122,
     123,     0,     0,   126,   127,   128,   129,   130,   131,  -121,
       0,     0,     0,     0,     0,  -121,  -121,  -121,  -121,  -121,
    -121,  -121,  -121,  -121,  -121,  -121,  -121,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,   132,     0,
       0,     0,   133,     0,   134,     0,     0,     0,     0,     0,
       0,   132,     0,     0,     0,   133,     0,   134
};

static const yytype_int16 yycheck[] =
{
       0,    33,     0,   172,   254,    95,    30,    47,   407,   178,
      28,    29,    30,    46,    48,     0,    12,    13,    14,    15,
      16,    17,     1,    23,    24,    21,    22,     3,    89,   355,
      91,    39,   190,   106,    47,    87,    46,    80,    81,    25,
      47,    93,   132,   133,    71,   106,    25,    25,    84,    89,
      84,    48,    87,    86,    80,    81,    48,   177,    93,    86,
      96,    47,   182,   183,    82,    87,    84,    85,    47,    47,
      47,    93,    68,    80,    81,    88,    86,    95,     2,     3,
       4,     5,     6,    82,    48,    82,    87,    89,   414,    89,
      82,    91,    94,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   502,    68,   113,   106,    91,    87,    93,
      86,   111,    47,   111,   132,   133,    89,   190,   130,   131,
      93,    86,    87,    40,    41,    91,   284,    93,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   167,   131,    85,   170,    80,    81,    96,    91,   167,
     308,    94,   170,    88,     3,   481,   325,   200,   327,    48,
     220,   221,   162,    71,   164,   189,    93,    94,   192,    86,
      94,   189,   190,    90,   192,    92,    96,   177,    93,   505,
      49,    50,   182,   183,    73,    74,    75,    76,    93,    94,
       3,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   214,   215,   216,   217,   218,    47,   328,   227,
     330,   284,    57,    58,   304,   305,   181,     3,    48,   292,
     462,   463,   464,   465,    48,   214,   215,   216,   217,   218,
     399,   292,    60,    61,    93,   308,   486,   297,   298,   299,
     300,   301,   362,    73,    74,    75,    76,    93,   266,    87,
     268,   371,    84,    93,    94,   424,    96,    47,    48,    92,
     256,   261,    47,    48,    23,   283,   284,    26,    27,    28,
      29,    30,    31,    93,    94,   395,    96,   397,    47,    48,
     276,   277,   402,   403,   404,    92,   304,   305,     3,   254,
     308,     3,   292,    93,    94,   415,    96,    47,    48,   419,
      47,    48,    86,    55,   269,    66,   324,    87,   326,   274,
      86,   329,   312,    48,   312,    82,   316,   317,    93,   439,
      48,   321,    38,    39,    40,    41,    42,    43,   328,    87,
     330,    87,   350,     3,    26,    84,    23,   333,   334,   459,
      48,   461,    87,   339,    48,   341,    48,    48,    79,    48,
     315,    48,   370,   353,   354,     3,    86,   322,    48,   359,
       3,    87,   362,   200,    24,   336,   331,   332,   336,   292,
      86,   371,   296,   361,    90,   493,    92,   321,   396,   434,
     409,   456,   382,   401,    21,    22,    23,    24,   466,    26,
      27,    28,    29,    30,    31,   395,   503,   397,   466,   364,
     525,   366,   402,   403,   404,   505,   509,   372,   373,   409,
     428,    36,   377,   378,   511,   415,   466,   466,    36,   419,
      -1,    -1,    -1,    -1,   389,    -1,    -1,   392,    21,   394,
      23,    24,    -1,    26,    27,    28,    29,    30,    31,   439,
      26,    27,    28,    29,    30,    31,   411,    -1,    -1,    -1,
      -1,   447,   448,   449,   450,    -1,    -1,    -1,   423,   459,
      -1,   461,    23,    24,    -1,    26,    27,    28,    29,    30,
      31,    -1,   437,    -1,   506,   440,    -1,    -1,    -1,    -1,
     480,    -1,   482,   483,    -1,    -1,   451,    -1,    -1,    -1,
      -1,    -1,   510,   493,   512,   527,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,   470,   471,   472,   473,   509,
       1,   511,    -1,    -1,     5,     6,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,    -1,   525,    -1,   492,    -1,    -1,
       3,   496,    -1,    -1,    25,   500,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    40,
      41,    -1,    -1,    44,    45,    -1,    47,    -1,    49,    50,
      51,    52,    53,    54,    -1,    56,    -1,    -1,    59,    -1,
      -1,    62,    63,    64,    65,    -1,    67,     1,    69,    70,
      -1,     5,     6,    -1,    -1,    -1,    77,    78,    -1,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    88,    -1,    90,
      -1,    25,    93,    94,    95,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,     5,     6,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    77,    78,    -1,    -1,    25,    -1,    -1,
      -1,    -1,    86,    -1,    88,    -1,    90,    -1,    -1,    -1,
      -1,    95,    40,    41,    -1,    -1,    44,    45,    -1,    47,
      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    -1,
      -1,    59,    -1,    -1,    62,    63,    64,    65,    -1,    67,
      -1,    69,    70,     4,     5,     6,    -1,    -1,    -1,    77,
      78,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,
      88,    -1,    90,    -1,    25,    93,    94,    95,    96,     4,
       5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,     3,    47,    -1,    49,    50,
      25,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    -1,    47,    -1,    49,    50,    77,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    88,    -1,    90,
      -1,    -1,    93,    -1,    95,     4,     5,     6,    -1,    -1,
      -1,    -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    90,    25,    -1,    -1,    -1,
      95,     4,     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,
      49,    50,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    77,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    88,
      -1,    90,    91,    -1,    -1,    -1,    95,     4,     5,     6,
      -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    90,    25,    -1,
      -1,    -1,    95,     4,     5,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    -1,
      47,    -1,    49,    50,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    -1,    47,    -1,    49,    50,
      77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    88,    -1,    90,    91,    -1,     5,     6,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    25,    88,    -1,    90,
      -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,
      49,    50,    51,    52,    53,    54,    -1,    56,    -1,    -1,
      59,    -1,    -1,    62,    63,    64,    65,    -1,    67,    -1,
      69,    70,     5,     6,    -1,    -1,    -1,    -1,    77,    78,
      -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    88,
      -1,    90,    25,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    51,    52,
      53,    54,    -1,    56,    -1,    -1,    59,    -1,    -1,    62,
      63,    64,    65,    -1,    67,    -1,    69,    70,    -1,    72,
       5,     6,    -1,    -1,    77,    78,    -1,    -1,    -1,    82,
      -1,    -1,    85,    86,    -1,    88,    -1,    90,    -1,    -1,
      25,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    -1,    47,    -1,    49,    50,    51,    52,    53,    54,
      -1,    56,    -1,    -1,    59,    -1,    -1,    62,    63,    64,
      65,    -1,    67,    -1,    69,    70,     5,     6,    -1,    -1,
      -1,    -1,    77,    78,    -1,    -1,    -1,    82,    -1,    -1,
      85,    86,    -1,    88,    -1,    90,    25,     5,     6,    -1,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    25,    47,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    -1,    -1,    -1,    77,    78,
      -1,    -1,    -1,     5,     6,    -1,    -1,    86,    -1,    88,
      -1,    90,    -1,    -1,    -1,    -1,    95,    -1,    -1,    77,
      78,    -1,    -1,    25,     5,     6,    -1,    -1,    86,    -1,
      88,    -1,    90,    -1,    -1,    -1,    -1,    95,    40,    41,
      -1,    -1,    44,    45,    25,    47,    -1,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,
       5,     6,    -1,    -1,    86,    -1,    88,    -1,    90,    -1,
      -1,    -1,    -1,    95,    -1,    -1,    77,    78,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    86,    -1,    88,    -1,    90,
      -1,    -1,    -1,    -1,    95,    40,    41,    -1,    -1,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     4,     5,     6,     7,     8,    -1,    -1,
      -1,    -1,    77,    78,    -1,     4,     5,     6,     7,     8,
      -1,    86,    -1,    88,    -1,    90,    -1,    -1,    -1,    -1,
      95,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,
       8,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    90,
      -1,    92,     7,     8,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    90,    -1,    92,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    -1,    32,    33,    34,
      35,    -1,    -1,    38,    39,    40,    41,    42,    43,     3,
      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    26,    27,    28,    29,    30,    31,    86,    -1,
      -1,    -1,    90,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,    90,    -1,    92
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     1,     5,     6,    25,    40,    41,    44,    45,    47,
      49,    50,    51,    52,    53,    54,    56,    59,    62,    63,
      64,    65,    67,    69,    70,    77,    78,    83,    86,    88,
      90,    93,    94,    95,    99,   100,   101,   108,   109,   111,
     112,   113,   114,   115,   116,   118,   121,   122,   123,   128,
     130,   131,   132,   133,   134,   135,   136,   137,   141,   142,
     147,   152,   153,   154,   155,   166,   167,   168,   169,   172,
     201,   202,   203,    95,   111,   128,   128,   128,   128,   128,
     200,   200,   200,   200,   200,   200,   200,   200,   111,   138,
     140,   138,   135,     4,    25,    93,   117,   120,   124,   125,
     126,   135,   119,   120,    71,    86,   156,   159,     0,    84,
      96,   202,   203,   110,   114,     4,     5,     6,     7,     8,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    86,    90,    92,   127,    21,    22,    23,    24,
      26,    27,    28,    29,    30,    31,     3,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    82,
      85,    96,   204,   205,   200,    93,    94,    86,   131,   132,
      86,   132,   135,    93,    94,    96,   206,   207,   135,   143,
     144,   135,   207,   207,     3,   140,    87,   126,    89,    94,
      93,    91,    94,     1,    25,   125,   140,   160,   161,   162,
     199,   108,   114,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,     5,     6,    25,    40,    41,   123,
     129,   129,    87,   126,    91,   126,    46,    86,   131,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   135,   135,
     135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
     135,    72,   102,   103,   104,   108,   173,   174,    96,    80,
      81,    88,   111,   163,   170,   132,     3,   132,     3,   199,
      93,    94,    96,   102,   199,    48,    57,    58,   145,   146,
     207,   102,   102,   139,    93,   120,   124,   125,   135,   120,
      87,   157,    93,     1,   131,   134,     4,   129,   129,   129,
     129,   129,    40,    41,    86,    90,   127,    87,    93,    91,
     135,    84,   206,   207,   200,   165,    92,    92,    89,   111,
     164,     3,   158,   159,     3,   135,     3,   135,   207,    55,
     207,   200,   200,    60,    61,   148,   149,   150,   151,    66,
      48,    68,   135,   162,   128,    87,   126,    91,   126,    46,
      86,    87,   108,    86,   175,   207,   111,   111,    89,    93,
     111,   170,   207,   135,   199,   135,   199,   102,   135,   102,
     207,   207,   200,   200,    48,   150,   151,   200,   200,    87,
      91,   135,    25,   111,   176,   177,   111,   105,   106,   107,
     172,   111,   158,   102,    87,   207,    93,   207,    48,   135,
     102,   207,   207,   207,   207,    87,   111,     3,    87,    93,
      26,   178,   179,    84,   207,   207,    48,    84,   171,   207,
     102,   135,   102,   199,   135,   102,   102,   102,   139,   177,
     180,   207,    23,   172,   102,   102,    48,    87,    48,   207,
     199,    48,    48,   135,    79,   182,    48,    73,    74,    75,
      76,   183,   184,   187,   193,   196,   181,   171,    48,   207,
     102,   207,   200,   200,   200,   200,   207,   182,   102,   102,
     175,   175,   175,   175,    48,   184,   187,   193,   196,    48,
     207,   207,   207,   207,    48,   111,   185,   186,    48,   172,
     189,   191,   192,   200,    48,   111,   194,   195,    48,   111,
     197,   198,     3,   206,   207,   207,   111,   163,   188,   207,
      86,   207,   139,   186,    48,    48,   191,   159,     3,    48,
     195,   135,    48,   198,   135,   190,    87,   111,   188
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    98,    99,    99,    99,   100,   100,   101,   101,   102,
     102,   103,   104,   104,   105,   105,   106,   107,   107,   108,
     108,   108,   109,   110,   110,   111,   112,   113,   114,   114,
     115,   115,   115,   116,   117,   117,   118,   119,   119,   120,
     120,   120,   120,   120,   120,   121,   122,   122,   123,   123,
     123,   123,   123,   123,   123,   123,   124,   125,   126,   126,
     126,   126,   126,   126,   127,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   129,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   130,   130,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
     131,   132,   133,   133,   133,   133,   133,   133,   133,   133,
     133,   133,   133,   133,   133,   134,   134,   135,   135,   136,
     136,   136,   136,   136,   136,   136,   137,   137,   138,   138,
     139,   140,   140,   141,   141,   142,   143,   143,   144,   144,
     145,   146,   147,   148,   148,   148,   148,   149,   149,   150,
     151,   152,   152,   152,   152,   152,   152,   153,   153,   153,
     154,   154,   154,   155,   156,   157,   158,   158,   159,   159,
     160,   160,   161,   161,   162,   162,   163,   163,   163,   164,
     164,   165,   166,   167,   168,   168,   169,   170,   170,   170,
     171,   171,   172,   172,   173,   174,   174,   175,   175,   176,
     176,   177,   177,   177,   178,   178,   180,   179,   181,   179,
     182,   183,   183,   183,   183,   183,   183,   183,   183,   184,
     184,   185,   185,   186,   186,   187,   187,   188,   188,   189,
     190,   189,   191,   191,   192,   192,   193,   193,   194,   194,
     195,   196,   196,   197,   197,   198,   199,   200,   201,   201,
     202,   202,   202,   202,   203,   203,   204,   204,   205,   205,
     206,   206,   206,   206,   206,   206,   207,   207
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     1,     2,     1,     3,     0,
       1,     2,     1,     3,     0,     1,     2,     1,     3,     1,
       1,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     3,     3,     1,     3,     0,
       1,     1,     2,     2,     3,     2,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     3,     3,     3,     1,     1,     2,     2,     3,     4,
       3,     4,     2,     2,     3,     5,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     2,     2,     3,     4,     3,     4,
       3,     5,     2,     2,     2,     2,     2,     3,     5,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     2,
       0,     1,     4,     1,     1,     4,     1,     2,     4,     2,
       7,     4,     6,     0,     1,     1,     2,     1,     2,     7,
       4,     7,     6,     9,    10,     9,    12,     1,     1,     1,
       9,     9,     5,     0,     1,     1,     0,     1,     3,     2,
       0,     1,     1,     3,     1,     1,     2,     1,     3,     1,
       3,     0,     0,     2,     4,     7,     2,     1,     3,     3,
       1,     1,     7,     9,     1,     9,     7,     0,     3,     1,
       3,     1,     4,     2,     0,     1,     0,     3,     0,     4,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     7,
       5,     1,     3,     1,     4,     7,     5,     1,     2,     2,
       0,     5,     1,     1,     1,     3,     7,     5,     1,     3,
       1,     7,     5,     1,     3,     4,     0,     0,     1,     1,
       1,     1,     2,     2,     0,     1,     0,     1,     1,     2,
       1,     1,     1,     2,     2,     2,     0,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (parser, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if OCTAVE_DEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, octave::base_parser& parser)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, octave::base_parser& parser)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, octave::base_parser& parser)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !OCTAVE_DEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !OCTAVE_DEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, octave::base_parser& parser)
{
  YYUSE (yyvaluep);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 3: /* '='  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1869 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 4: /* ':'  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1875 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 5: /* '-'  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1881 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 6: /* '+'  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1887 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 7: /* '*'  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1893 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 8: /* '/'  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1899 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 9: /* ADD_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1905 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 10: /* SUB_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1911 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 11: /* MUL_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1917 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 12: /* DIV_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1923 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 13: /* LEFTDIV_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1929 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 14: /* POW_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1935 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 15: /* EMUL_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1941 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 16: /* EDIV_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1947 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 17: /* ELEFTDIV_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1953 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 18: /* EPOW_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1959 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 19: /* AND_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1965 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 20: /* OR_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1971 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 21: /* EXPR_AND_AND  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1977 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 22: /* EXPR_OR_OR  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1983 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 23: /* EXPR_AND  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1989 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 24: /* EXPR_OR  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1995 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 25: /* EXPR_NOT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2001 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 26: /* EXPR_LT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2007 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 27: /* EXPR_LE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2013 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 28: /* EXPR_EQ  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2019 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 29: /* EXPR_NE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2025 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 30: /* EXPR_GE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2031 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 31: /* EXPR_GT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2037 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 32: /* LEFTDIV  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2043 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 33: /* EMUL  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2049 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 34: /* EDIV  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2055 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 35: /* ELEFTDIV  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2061 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 36: /* EPLUS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2067 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 37: /* EMINUS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2073 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 38: /* HERMITIAN  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2079 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 39: /* TRANSPOSE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2085 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 40: /* PLUS_PLUS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2091 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 41: /* MINUS_MINUS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2097 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 42: /* POW  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2103 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 43: /* EPOW  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2109 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 44: /* NUM  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2115 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 45: /* IMAG_NUM  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2121 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 46: /* STRUCT_ELT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2127 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 47: /* NAME  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2133 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 48: /* END  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2139 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 49: /* DQ_STRING  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2145 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 50: /* SQ_STRING  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2151 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 51: /* FOR  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2157 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 52: /* PARFOR  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2163 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 53: /* WHILE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2169 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 54: /* DO  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2175 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 55: /* UNTIL  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2181 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 56: /* IF  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2187 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 57: /* ELSEIF  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2193 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 58: /* ELSE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2199 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 59: /* SWITCH  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2205 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 60: /* CASE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2211 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 61: /* OTHERWISE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2217 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 62: /* BREAK  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2223 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 63: /* CONTINUE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2229 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 64: /* FUNC_RET  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2235 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 65: /* UNWIND  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2241 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 66: /* CLEANUP  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2247 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 67: /* TRY  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2253 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 68: /* CATCH  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2259 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 69: /* GLOBAL  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2265 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 70: /* PERSISTENT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2271 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 71: /* FCN_HANDLE  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2277 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 72: /* CLASSDEF  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2283 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 73: /* PROPERTIES  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2289 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 74: /* METHODS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2295 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 75: /* EVENTS  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2301 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 76: /* ENUMERATION  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2307 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 77: /* METAQUERY  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2313 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 78: /* SUPERCLASSREF  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2319 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 79: /* FQ_IDENT  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2325 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 80: /* GET  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2331 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 81: /* SET  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2337 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 82: /* FCN  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2343 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 83: /* LEXICAL_ERROR  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2349 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 97: /* UNARY  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2355 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 99: /* input  */
#line 322 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_type); }
#line 2361 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 100: /* simple_list  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2367 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 101: /* simple_list1  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2373 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 102: /* opt_list  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2379 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 103: /* list  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2385 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 104: /* list1  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2391 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 105: /* opt_fcn_list  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2397 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 106: /* fcn_list  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2403 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 107: /* fcn_list1  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2409 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 108: /* statement  */
#line 345 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_type); }
#line 2415 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 109: /* word_list_cmd  */
#line 332 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_index_expression_type); }
#line 2421 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 110: /* word_list  */
#line 333 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2427 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 111: /* identifier  */
#line 331 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2433 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 112: /* superclass_identifier  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_funcall_type); }
#line 2439 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 113: /* meta_identifier  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_funcall_type); }
#line 2445 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 114: /* string  */
#line 326 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2451 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 115: /* constant  */
#line 326 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2457 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 116: /* matrix  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2463 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 117: /* matrix_rows  */
#line 323 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_matrix_type); }
#line 2469 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 118: /* cell  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2475 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 119: /* cell_rows  */
#line 324 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_cell_type); }
#line 2481 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 120: /* cell_or_matrix_row  */
#line 333 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2487 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 121: /* fcn_handle  */
#line 327 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_fcn_handle_type); }
#line 2493 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 122: /* anon_fcn_handle  */
#line 330 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_anon_fcn_handle_type); }
#line 2499 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 123: /* primary_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2505 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 124: /* magic_colon  */
#line 326 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2511 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 125: /* magic_tilde  */
#line 331 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2517 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 126: /* arg_list  */
#line 333 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2523 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 128: /* oper_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2529 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 129: /* power_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2535 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 130: /* colon_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2541 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 131: /* simple_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2547 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 132: /* assign_lhs  */
#line 333 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2553 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 133: /* assign_expr  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2559 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 134: /* expr_no_assign  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2565 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 135: /* expression  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2571 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 136: /* command  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2577 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 137: /* declaration  */
#line 344 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_command_type); }
#line 2583 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 138: /* decl1  */
#line 343 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_init_list_type); }
#line 2589 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 140: /* decl2  */
#line 342 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_elt_type); }
#line 2595 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 141: /* select_command  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2601 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 142: /* if_command  */
#line 336 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_type); }
#line 2607 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 143: /* if_cmd_list  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_list_type); }
#line 2613 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 144: /* if_cmd_list1  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_list_type); }
#line 2619 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 145: /* elseif_clause  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_clause_type); }
#line 2625 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 146: /* else_clause  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_clause_type); }
#line 2631 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 147: /* switch_command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_command_type); }
#line 2637 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 148: /* case_list  */
#line 341 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_list_type); }
#line 2643 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 149: /* case_list1  */
#line 341 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_list_type); }
#line 2649 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 150: /* switch_case  */
#line 340 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_type); }
#line 2655 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 151: /* default_case  */
#line 340 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_type); }
#line 2661 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 152: /* loop_command  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2667 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 153: /* jump_command  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2673 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 154: /* except_command  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2679 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 158: /* opt_param_list  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2685 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 159: /* param_list  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2691 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 160: /* param_list1  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2697 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 161: /* param_list2  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2703 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 162: /* param_list_elt  */
#line 342 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_elt_type); }
#line 2709 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 163: /* return_list  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2715 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 164: /* return_list1  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2721 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 168: /* file  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2727 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 169: /* function_beg  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2733 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 170: /* fcn_name  */
#line 331 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2739 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 171: /* function_end  */
#line 345 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_type); }
#line 2745 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 172: /* function  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2751 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 173: /* classdef_beg  */
#line 317 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2757 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 174: /* classdef  */
#line 349 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_type); }
#line 2763 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 175: /* opt_attr_list  */
#line 351 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_list_type); }
#line 2769 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 176: /* attr_list  */
#line 351 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_list_type); }
#line 2775 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 177: /* attr  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_type); }
#line 2781 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 178: /* opt_superclass_list  */
#line 353 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_list_type); }
#line 2787 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 179: /* superclass_list  */
#line 353 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_list_type); }
#line 2793 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 182: /* superclass  */
#line 352 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_type); }
#line 2799 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 183: /* class_body  */
#line 354 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_body_type); }
#line 2805 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 184: /* properties_block  */
#line 357 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_properties_block_type); }
#line 2811 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 185: /* property_list  */
#line 356 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_property_list_type); }
#line 2817 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 186: /* class_property  */
#line 355 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_property_type); }
#line 2823 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 187: /* methods_block  */
#line 359 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_methods_block_type); }
#line 2829 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 188: /* method_decl1  */
#line 347 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).octave_user_function_type); }
#line 2835 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 189: /* method_decl  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2841 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 191: /* method  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2847 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 192: /* methods_list  */
#line 358 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_methods_list_type); }
#line 2853 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 193: /* events_block  */
#line 362 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_events_block_type); }
#line 2859 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 194: /* events_list  */
#line 361 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_events_list_type); }
#line 2865 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 195: /* class_event  */
#line 360 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_event_type); }
#line 2871 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 196: /* enum_block  */
#line 365 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_block_type); }
#line 2877 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 197: /* enum_list  */
#line 364 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_list_type); }
#line 2883 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 198: /* class_enum  */
#line 363 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_type); }
#line 2889 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 200: /* stash_comment  */
#line 319 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2895 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 202: /* sep_no_nl  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2901 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 203: /* opt_sep_no_nl  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2907 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 204: /* opt_nl  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2913 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 205: /* nl  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2919 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 206: /* sep  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2925 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 207: /* opt_sep  */
#line 318 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2931 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}



struct yypstate
  {
    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;
    /* Used to determine if this is the first time this instance has
       been used.  */
    int yynew;
  };

int
yyparse (octave::base_parser& parser)
{
  return yypull_parse (YY_NULLPTR, parser);
}

int
yypull_parse (yypstate *yyps, octave::base_parser& parser)
{
  int yystatus;
  yypstate *yyps_local;
  int yychar;
  YYSTYPE yylval;
  if (yyps)
    yyps_local = yyps;
  else
    {
      yyps_local = yypstate_new ();
      if (!yyps_local)
        {
          yyerror (parser, YY_("memory exhausted"));
          return 2;
        }
    }
  do {
    yychar = yylex (&yylval, scanner);
    yystatus =
      yypush_parse (yyps_local, yychar, &yylval, parser);
  } while (yystatus == YYPUSH_MORE);
  if (!yyps)
    yypstate_delete (yyps_local);
  return yystatus;
}

/* Initialize the parser data structure.  */
yypstate *
yypstate_new (void)
{
  yypstate *yyps;
  yyps = (yypstate *) malloc (sizeof *yyps);
  if (!yyps)
    return YY_NULLPTR;
  yyps->yynew = 1;
  return yyps;
}

void
yypstate_delete (yypstate *yyps)
{
#ifndef yyoverflow
  /* If the stack was reallocated but the parse did not complete, then the
     stack still needs to be freed.  */
  if (!yyps->yynew && yyps->yyss != yyps->yyssa)
    YYSTACK_FREE (yyps->yyss);
#endif
  free (yyps);
}

#define octave_nerrs yyps->octave_nerrs
#define yystate yyps->yystate
#define yyerrstatus yyps->yyerrstatus
#define yyssa yyps->yyssa
#define yyss yyps->yyss
#define yyssp yyps->yyssp
#define yyvsa yyps->yyvsa
#define yyvs yyps->yyvs
#define yyvsp yyps->yyvsp
#define yystacksize yyps->yystacksize


/*---------------.
| yypush_parse.  |
`---------------*/

int
yypush_parse (yypstate *yyps, int yypushed_char, YYSTYPE const *yypushed_val, octave::base_parser& parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  if (!yyps->yynew)
    {
      yyn = yypact[yystate];
      goto yyread_pushed_token;
    }

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      if (!yyps->yynew)
        {
          YYDPRINTF ((stderr, "Return for a new token:\n"));
          yyresult = YYPUSH_MORE;
          goto yypushreturn;
        }
      yyps->yynew = 0;
yyread_pushed_token:
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yypushed_char;
      if (yypushed_val)
        yylval = *yypushed_val;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 386 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = nullptr;
                    parser.m_stmt_list = (yyvsp[-1].tree_statement_list_type);
                    YYACCEPT;
                  }
#line 3294 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 392 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = nullptr;
                    lexer.m_end_of_input = true;
                    parser.m_stmt_list = (yyvsp[-1].tree_statement_list_type);
                    YYACCEPT;
                  }
#line 3305 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 4:
#line 399 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = nullptr;
                    YYABORT;
                  }
#line 3314 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 406 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].punct_type));

                    (yyval.tree_statement_list_type) = nullptr;
                  }
#line 3324 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 6:
#line 412 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.set_stmt_print_flag ((yyvsp[-1].tree_statement_list_type), (yyvsp[0].punct_type), false); }
#line 3330 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 416 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.make_statement_list ((yyvsp[0].tree_statement_type)); }
#line 3336 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 418 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.append_statement_list ((yyvsp[-2].tree_statement_list_type), (yyvsp[-1].punct_type), (yyvsp[0].tree_statement_type), false); }
#line 3342 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 9:
#line 422 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = new octave::tree_statement_list (); }
#line 3348 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 10:
#line 424 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = (yyvsp[0].tree_statement_list_type); }
#line 3354 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 11:
#line 428 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.set_stmt_print_flag ((yyvsp[-1].tree_statement_list_type), (yyvsp[0].punct_type), true); }
#line 3360 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 432 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.make_statement_list ((yyvsp[0].tree_statement_type)); }
#line 3366 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 434 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.append_statement_list ((yyvsp[-2].tree_statement_list_type), (yyvsp[-1].punct_type), (yyvsp[0].tree_statement_type), true); }
#line 3372 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 438 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = new octave::tree_statement_list (); }
#line 3378 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 440 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = (yyvsp[0].tree_statement_list_type); }
#line 3384 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 444 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].punct_type));

                    (yyval.tree_statement_list_type) = (yyvsp[-1].tree_statement_list_type);
                  }
#line 3394 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 452 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    octave::tree_statement *stmt = parser.make_statement ((yyvsp[0].tree_function_def_type));
                    (yyval.tree_statement_list_type) = new octave::tree_statement_list (stmt);
                  }
#line 3403 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 457 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    octave::tree_statement *stmt = parser.make_statement ((yyvsp[0].tree_function_def_type));
                    (yyval.tree_statement_list_type) = parser.append_statement_list ((yyvsp[-2].tree_statement_list_type), (yyvsp[-1].punct_type), stmt, false);
                  }
#line 3412 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 464 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_expression_type)); }
#line 3418 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 466 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_command_type)); }
#line 3424 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 468 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_index_expression_type)); }
#line 3430 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 480 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_index_expression_type) = parser.make_index_expression ((yyvsp[-1].tree_identifier_type), (yyvsp[0].tree_argument_list_type), '(');
                    if (! (yyval.tree_index_expression_type))
                      {
                        // make_index_expression deleted $1 and $2.
                        YYABORT;
                      }
                  }
#line 3443 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 491 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new octave::tree_argument_list ((yyvsp[0].tree_constant_type)); }
#line 3449 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 493 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_argument_list_type)->append ((yyvsp[0].tree_constant_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type);
                  }
#line 3458 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 504 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    octave::symbol_record sr = (yyvsp[0].tok_val)->sym_rec ();
                    (yyval.tree_identifier_type) = new octave::tree_identifier (sr, (yyvsp[0].tok_val)->line (), (yyvsp[0].tok_val)->column ());
                  }
#line 3467 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 512 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string method_nm = (yyvsp[0].tok_val)->superclass_method_name ();
                    std::string class_nm = (yyvsp[0].tok_val)->superclass_class_name ();

                    (yyval.tree_funcall_type) = parser.make_superclass_ref (method_nm, class_nm);
                  }
#line 3478 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 521 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string class_nm = (yyvsp[0].tok_val)->text ();

                    (yyval.tree_funcall_type) = parser.make_meta_class_query (class_nm);
                  }
#line 3488 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 529 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (DQ_STRING, (yyvsp[0].tok_val)); }
#line 3494 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 531 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (SQ_STRING, (yyvsp[0].tok_val)); }
#line 3500 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 535 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (NUM, (yyvsp[0].tok_val)); }
#line 3506 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 537 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (IMAG_NUM, (yyvsp[0].tok_val)); }
#line 3512 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 539 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = (yyvsp[0].tree_constant_type); }
#line 3518 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 543 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.finish_matrix ((yyvsp[-1].tree_matrix_type)); }
#line 3524 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 547 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_matrix_type) = (yyvsp[0].tree_argument_list_type) ? new octave::tree_matrix ((yyvsp[0].tree_argument_list_type)) : nullptr; }
#line 3530 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 549 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-2].tree_matrix_type))
                      {
                        if ((yyvsp[0].tree_argument_list_type))
                          (yyvsp[-2].tree_matrix_type)->append ((yyvsp[0].tree_argument_list_type));

                        (yyval.tree_matrix_type) = (yyvsp[-2].tree_matrix_type);
                      }
                    else
                      (yyval.tree_matrix_type) = (yyvsp[0].tree_argument_list_type) ? new octave::tree_matrix ((yyvsp[0].tree_argument_list_type)) : nullptr;
                  }
#line 3546 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 563 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.finish_cell ((yyvsp[-1].tree_cell_type)); }
#line 3552 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 567 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_cell_type) = (yyvsp[0].tree_argument_list_type) ? new octave::tree_cell ((yyvsp[0].tree_argument_list_type)) : nullptr; }
#line 3558 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 569 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-2].tree_cell_type))
                      {
                        if ((yyvsp[0].tree_argument_list_type))
                          (yyvsp[-2].tree_cell_type)->append ((yyvsp[0].tree_argument_list_type));

                        (yyval.tree_cell_type) = (yyvsp[-2].tree_cell_type);
                      }
                    else
                      (yyval.tree_cell_type) = (yyvsp[0].tree_argument_list_type) ? new octave::tree_cell ((yyvsp[0].tree_argument_list_type)) : nullptr;
                  }
#line 3574 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 587 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = nullptr; }
#line 3580 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 589 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = nullptr; }
#line 3586 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 591 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[0].tree_argument_list_type); }
#line 3592 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 593 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type); }
#line 3598 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 595 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[0].tree_argument_list_type); }
#line 3604 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 597 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type); }
#line 3610 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 601 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_fcn_handle_type) = parser.make_fcn_handle ((yyvsp[0].tok_val));
                    lexer.m_looking_at_function_handle--;
                  }
#line 3619 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 608 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_anon_fcn_handle_type) = parser.make_anon_fcn_handle ((yyvsp[-2].tree_parameter_list_type), (yyvsp[0].tree_expression_type));
                    lexer.m_nesting_level.remove ();
                  }
#line 3628 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 613 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tree_parameter_list_type));

                    (yyval.tree_anon_fcn_handle_type) = nullptr;
                    parser.bison_error ("anonymous function bodies must be single expressions");
                    YYABORT;
                  }
#line 3640 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 623 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_identifier_type); }
#line 3646 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 625 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_constant_type); }
#line 3652 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 627 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_fcn_handle_type); }
#line 3658 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 629 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.m_looking_at_matrix_or_assign_lhs = false;
                    (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 3667 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 52:
#line 634 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3673 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 53:
#line 636 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_funcall_type); }
#line 3679 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 638 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_funcall_type); }
#line 3685 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 640 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[-1].tree_expression_type)->mark_in_parens (); }
#line 3691 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 644 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    octave_value tmp (octave_value::magic_colon_t);
                    (yyval.tree_constant_type) = new octave::tree_constant (tmp);
                  }
#line 3702 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 653 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    (yyval.tree_identifier_type) = new octave::tree_black_hole ();
                  }
#line 3712 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 661 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new octave::tree_argument_list ((yyvsp[0].tree_expression_type)); }
#line 3718 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 663 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new octave::tree_argument_list ((yyvsp[0].tree_constant_type)); }
#line 3724 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 665 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new octave::tree_argument_list ((yyvsp[0].tree_identifier_type)); }
#line 3730 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 61:
#line 667 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_constant_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3739 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 62:
#line 672 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_identifier_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3748 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 63:
#line 677 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_expression_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3757 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 64:
#line 684 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.m_looking_at_indirect_ref = true;
                  }
#line 3766 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 691 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3772 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 693 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (PLUS_PLUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3778 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 695 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (MINUS_MINUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3784 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 697 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), nullptr, '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3797 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 706 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3810 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 715 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), nullptr, '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3823 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 724 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3836 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 733 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (HERMITIAN, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3842 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 735 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (TRANSPOSE, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3848 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 737 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-2].tree_expression_type), (yyvsp[0].tok_val)->text ()); }
#line 3854 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 739 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_expression_type)); }
#line 3860 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 741 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (PLUS_PLUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3866 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 743 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (MINUS_MINUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3872 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 745 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (EXPR_NOT, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3878 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 747 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('+', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3884 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 749 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('-', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3890 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 751 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (POW, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3896 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 753 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EPOW, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3902 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 755 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('+', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3908 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 757 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('-', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3914 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 759 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('*', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3920 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 761 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('/', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3926 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 763 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('+', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3932 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 765 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('-', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3938 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 767 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EMUL, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3944 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 769 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3950 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 771 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (LEFTDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3956 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 773 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (ELEFTDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3962 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 777 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3968 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 779 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (PLUS_PLUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3974 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 781 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (MINUS_MINUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3980 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 783 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), nullptr, '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3993 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 792 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 4006 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 801 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), nullptr, '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 4019 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 810 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 4032 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 819 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-2].tree_expression_type), (yyvsp[0].tok_val)->text ()); }
#line 4038 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 821 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_expression_type)); }
#line 4044 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 823 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (PLUS_PLUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 4050 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 825 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (MINUS_MINUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 4056 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 827 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (EXPR_NOT, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 4062 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 829 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('+', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 4068 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 831 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('-', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 4074 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 835 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].tok_val));

                    (yyval.tree_expression_type) = parser.make_colon_expression ((yyvsp[-2].tree_expression_type), (yyvsp[0].tree_expression_type));

                    if (! (yyval.tree_expression_type))
                      {
                        // finish_colon_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 4090 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 847 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].tok_val));
                    YYUSE ((yyvsp[-1].tok_val));

                    (yyval.tree_expression_type) = parser.make_colon_expression ((yyvsp[-4].tree_expression_type), (yyvsp[0].tree_expression_type), (yyvsp[-2].tree_expression_type));

                    if (! (yyval.tree_expression_type))
                      {
                        // finish_colon_expression deleted $1, $3, and $5.
                        YYABORT;
                      }
                  }
#line 4107 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 862 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 4113 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 864 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 4119 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 866 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_LT, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4125 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 868 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_LE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4131 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 113:
#line 870 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_EQ, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4137 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 872 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_GE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4143 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 874 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_GT, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4149 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 876 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_NE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4155 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 878 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_AND, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4161 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 880 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_OR, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4167 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 882 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_boolean_op (EXPR_AND_AND, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4173 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 884 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_boolean_op (EXPR_OR_OR, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4179 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 888 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_argument_list_type) = parser.validate_matrix_for_assignment ((yyvsp[0].tree_expression_type));

                    if ((yyval.tree_argument_list_type))
                      { lexer.m_looking_at_matrix_or_assign_lhs = false; }
                    else
                      {
                        // validate_matrix_for_assignment deleted $1.
                        YYABORT;
                      }
                  }
#line 4195 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 902 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op ('=', (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4201 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 904 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (ADD_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4207 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 906 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (SUB_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4213 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 908 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (MUL_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4219 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 910 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (DIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4225 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 912 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (LEFTDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4231 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 914 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (POW_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4237 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 916 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EMUL_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4243 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 918 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4249 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 920 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (ELEFTDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4255 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 922 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EPOW_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4261 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 924 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (AND_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4267 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 926 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (OR_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4273 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 930 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[0].tree_expression_type) && ((yyvsp[0].tree_expression_type)->is_matrix () || (yyvsp[0].tree_expression_type)->iscell ()))
                      {
                        if (parser.validate_array_list ((yyvsp[0].tree_expression_type)))
                          (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                        else
                          {
                            delete (yyvsp[0].tree_expression_type);
                            YYABORT;
                          }
                      }
                    else
                      (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 4292 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 945 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_anon_fcn_handle_type); }
#line 4298 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 949 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 4304 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 951 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! (yyvsp[0].tree_expression_type))
                      YYABORT;

                    (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 4315 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 963 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_decl_command_type); }
#line 4321 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 965 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4327 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 967 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4333 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 969 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4339 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 971 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4345 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 973 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_function_def_type); }
#line 4351 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 975 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4357 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 983 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_decl_command_type) = parser.make_decl_command (GLOBAL, (yyvsp[-1].tok_val), (yyvsp[0].tree_decl_init_list_type));
                    lexer.m_looking_at_decl_list = false;
                  }
#line 4366 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 988 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_decl_command_type) = parser.make_decl_command (PERSISTENT, (yyvsp[-1].tok_val), (yyvsp[0].tree_decl_init_list_type));
                    lexer.m_looking_at_decl_list = false;
                  }
#line 4375 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 995 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_init_list_type) = new octave::tree_decl_init_list ((yyvsp[0].tree_decl_elt_type)); }
#line 4381 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 997 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_decl_init_list_type)->append ((yyvsp[0].tree_decl_elt_type));
                    (yyval.tree_decl_init_list_type) = (yyvsp[-1].tree_decl_init_list_type);
                  }
#line 4390 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1004 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.m_looking_at_initializer_expression = true;
                  }
#line 4399 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1010 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = new octave::tree_decl_elt ((yyvsp[0].tree_identifier_type)); }
#line 4405 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1012 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.m_looking_at_initializer_expression = false;
                    (yyval.tree_decl_elt_type) = new octave::tree_decl_elt ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 4416 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1025 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_if_command_type); }
#line 4422 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1027 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_switch_command_type); }
#line 4428 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1035 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.tree_if_command_type) = parser.finish_if_command ((yyvsp[-3].tok_val), (yyvsp[-1].tree_if_command_list_type), (yyvsp[0].tok_val), (yyvsp[-2].comment_type))))
                      {
                        // finish_if_command deleted $3.
                        YYABORT;
                      }
                  }
#line 4440 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1045 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_if_command_list_type) = (yyvsp[0].tree_if_command_list_type); }
#line 4446 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1047 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_if_command_list_type)->append ((yyvsp[0].tree_if_clause_type));
                    (yyval.tree_if_command_list_type) = (yyvsp[-1].tree_if_command_list_type);
                  }
#line 4455 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1054 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-3].tree_expression_type)->mark_braindead_shortcircuit ();

                    (yyval.tree_if_command_list_type) = parser.start_if_command ((yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type));
                  }
#line 4467 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1062 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_if_command_list_type)->append ((yyvsp[0].tree_if_clause_type));
                    (yyval.tree_if_command_list_type) = (yyvsp[-1].tree_if_command_list_type);
                  }
#line 4476 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1069 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-4].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-3].tree_expression_type)->mark_braindead_shortcircuit ();

                    (yyval.tree_if_clause_type) = parser.make_elseif_clause ((yyvsp[-6].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type), (yyvsp[-5].comment_type));
                  }
#line 4489 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1080 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].tok_val));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_if_clause_type) = new octave::tree_if_clause ((yyvsp[0].tree_statement_list_type), (yyvsp[-2].comment_type));
                  }
#line 4500 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1093 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_switch_command_type) = parser.finish_switch_command ((yyvsp[-5].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_switch_case_list_type), (yyvsp[0].tok_val), (yyvsp[-4].comment_type))))
                      {
                        // finish_switch_command deleted $3 adn $5.
                        YYABORT;
                      }
                  }
#line 4514 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1105 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new octave::tree_switch_case_list (); }
#line 4520 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1107 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new octave::tree_switch_case_list ((yyvsp[0].tree_switch_case_type)); }
#line 4526 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1109 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = (yyvsp[0].tree_switch_case_list_type); }
#line 4532 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1111 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_switch_case_list_type)->append ((yyvsp[0].tree_switch_case_type));
                    (yyval.tree_switch_case_list_type) = (yyvsp[-1].tree_switch_case_list_type);
                  }
#line 4541 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1118 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new octave::tree_switch_case_list ((yyvsp[0].tree_switch_case_type)); }
#line 4547 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1120 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_switch_case_list_type)->append ((yyvsp[0].tree_switch_case_type));
                    (yyval.tree_switch_case_list_type) = (yyvsp[-1].tree_switch_case_list_type);
                  }
#line 4556 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1127 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-4].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_switch_case_type) = parser.make_switch_case ((yyvsp[-6].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type), (yyvsp[-5].comment_type));
                  }
#line 4567 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 1136 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].tok_val));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_switch_case_type) = new octave::tree_switch_case ((yyvsp[0].tree_statement_list_type), (yyvsp[-2].comment_type));
                  }
#line 4578 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 1149 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyvsp[-4].tree_expression_type)->mark_braindead_shortcircuit ();

                    if (! ((yyval.tree_command_type) = parser.make_while_command ((yyvsp[-6].tok_val), (yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_while_command deleted $3 and $6.
                        YYABORT;
                      }
                  }
#line 4594 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 1161 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-3].punct_type));

                    (yyval.tree_command_type) = parser.make_do_until_command ((yyvsp[-1].tok_val), (yyvsp[-2].tree_statement_list_type), (yyvsp[0].tree_expression_type), (yyvsp[-4].comment_type));
                  }
#line 4605 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 1168 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (FOR, (yyvsp[-8].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type),
                                                         nullptr, (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_for_command deleted $3, $5, and $8.
                        YYABORT;
                      }
                  }
#line 4621 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 1180 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (FOR, (yyvsp[-9].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type),
                                                         nullptr, (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-8].comment_type))))
                      {
                        // make_for_command deleted $4, $6, and $9.
                        YYABORT;
                      }
                  }
#line 4637 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 1192 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (PARFOR, (yyvsp[-8].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type),
                                                         nullptr, (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_for_command deleted $3, $5, and $8.
                        YYABORT;
                      }
                  }
#line 4653 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 1204 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-7].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (PARFOR, (yyvsp[-11].tok_val), (yyvsp[-8].tree_argument_list_type), (yyvsp[-6].tree_expression_type),
                                                         (yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-10].comment_type))))
                      {
                        // make_for_command deleted $4, $6, $8, and $11.
                        YYABORT;
                      }
                  }
#line 4669 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 1222 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.tree_command_type) = parser.make_break_command ((yyvsp[0].tok_val))))
                      YYABORT;
                  }
#line 4678 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 1227 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = parser.make_continue_command ((yyvsp[0].tok_val)); }
#line 4684 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 1229 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = parser.make_return_command ((yyvsp[0].tok_val)); }
#line 4690 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 1238 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-6].punct_type));
                    YYUSE ((yyvsp[-4].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_unwind_command ((yyvsp[-8].tok_val), (yyvsp[-5].tree_statement_list_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type), (yyvsp[-3].comment_type))))
                      {
                        // make_unwind_command deleted $4 and $8.
                        YYABORT;
                      }
                  }
#line 4706 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 1251 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-6].punct_type));
                    YYUSE ((yyvsp[-4].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_try_command ((yyvsp[-8].tok_val), (yyvsp[-5].tree_statement_list_type), (yyvsp[-2].punct_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type), (yyvsp[-3].comment_type))))
                      {
                        // make_try_command deleted $4 and $8.
                        YYABORT;
                      }
                  }
#line 4722 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 1263 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_try_command ((yyvsp[-4].tok_val), (yyvsp[-1].tree_statement_list_type), 0, nullptr,
                                                         (yyvsp[0].tok_val), (yyvsp[-3].comment_type), nullptr)))
                      {
                        // make_try_command deleted $4.
                        YYABORT;
                      }
                  }
#line 4737 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 1280 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;

                    parser.m_curr_fcn_depth++;

                    if (parser.m_max_fcn_depth < parser.m_curr_fcn_depth)
                      parser.m_max_fcn_depth = parser.m_curr_fcn_depth;

                    // Will get a real name later.
                    lexer.m_symtab_context.push (octave::symbol_scope ("parser:push_fcn_symtab"));
                    parser.m_function_scopes.push (lexer.m_symtab_context.curr_scope ());

                    if (! lexer.m_reading_script_file
                        && parser.m_curr_fcn_depth == 1
                        && ! parser.m_parsing_subfunctions)
                      parser.m_primary_fcn_scope
                        = lexer.m_symtab_context.curr_scope ();

                    if (lexer.m_reading_script_file
                        && parser.m_curr_fcn_depth > 1)
                      {
                        parser.bison_error ("nested functions not implemented in this context");
                        YYABORT;
                      }
                  }
#line 4767 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 1312 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.m_looking_at_parameter_list = true;

                    if (lexer.m_looking_at_function_handle)
                      {
                        // Will get a real name later.
                        lexer.m_symtab_context.push (octave::symbol_scope ("parser:param_lsit_beg"));
                        lexer.m_looking_at_function_handle--;
                        lexer.m_looking_at_anon_fcn_args = true;
                      }
                  }
#line 4784 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 1327 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.m_looking_at_parameter_list = false;
                    lexer.m_looking_for_object_index = false;
                  }
#line 4794 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 1335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = nullptr; }
#line 4800 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 1337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = (yyvsp[0].tree_parameter_list_type); }
#line 4806 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 1341 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-1].tree_parameter_list_type))
                      lexer.mark_as_variables ((yyvsp[-1].tree_parameter_list_type)->variable_names ());

                    (yyval.tree_parameter_list_type) = (yyvsp[-1].tree_parameter_list_type);
                  }
#line 4817 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 1348 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_parameter_list_type) = nullptr;
                    parser.bison_error ("invalid parameter list");
                    YYABORT;
                  }
#line 4827 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 1356 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = nullptr; }
#line 4833 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 1358 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[0].tree_parameter_list_type)->mark_as_formal_parameters ();

                    if (parser.validate_param_list ((yyvsp[0].tree_parameter_list_type), octave::tree_parameter_list::in))
                      {
                        lexer.mark_as_variables ((yyvsp[0].tree_parameter_list_type)->variable_names ());
                        (yyval.tree_parameter_list_type) = (yyvsp[0].tree_parameter_list_type);
                      }
                    else
                      {
                        delete (yyvsp[0].tree_parameter_list_type);
                        YYABORT;
                      }
                  }
#line 4852 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 1375 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = new octave::tree_parameter_list ((yyvsp[0].tree_decl_elt_type)); }
#line 4858 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 1377 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_parameter_list_type)->append ((yyvsp[0].tree_decl_elt_type));
                    (yyval.tree_parameter_list_type) = (yyvsp[-2].tree_parameter_list_type);
                  }
#line 4867 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 1384 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = (yyvsp[0].tree_decl_elt_type); }
#line 4873 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 1386 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = new octave::tree_decl_elt ((yyvsp[0].tree_identifier_type)); }
#line 4879 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 1394 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.m_looking_at_return_list = false;

                    (yyval.tree_parameter_list_type) = new octave::tree_parameter_list ();
                  }
#line 4889 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 1400 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.m_looking_at_return_list = false;

                    octave::tree_parameter_list *tmp = new octave::tree_parameter_list ((yyvsp[0].tree_identifier_type));

                    // Even though this parameter list can contain only
                    // a single identifier, we still need to validate it
                    // to check for varargin or varargout.

                    if (parser.validate_param_list (tmp, octave::tree_parameter_list::out))
                      (yyval.tree_parameter_list_type) = tmp;
                    else
                      {
                        delete tmp;
                        YYABORT;
                      }
                  }
#line 4911 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 1418 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.m_looking_at_return_list = false;

                    // Check for duplicate parameter names, varargin,
                    // or varargout.

                    if (parser.validate_param_list ((yyvsp[-1].tree_parameter_list_type), octave::tree_parameter_list::out))
                      (yyval.tree_parameter_list_type) = (yyvsp[-1].tree_parameter_list_type);
                    else
                      {
                        delete (yyvsp[-1].tree_parameter_list_type);
                        YYABORT;
                      }
                  }
#line 4930 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 1435 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = new octave::tree_parameter_list (new octave::tree_decl_elt ((yyvsp[0].tree_identifier_type))); }
#line 4936 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 1437 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_parameter_list_type)->append (new octave::tree_decl_elt ((yyvsp[0].tree_identifier_type)));
                    (yyval.tree_parameter_list_type) = (yyvsp[-2].tree_parameter_list_type);
                  }
#line 4945 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 1449 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { parser.m_parsing_local_functions = true; }
#line 4951 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 202:
#line 1453 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;

                    // This scope may serve as the parent scope for local
                    // functions in classdef files..
                    lexer.m_symtab_context.push (octave::symbol_scope ("parser:push_script_symtab"));
                  }
#line 4963 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 203:
#line 1463 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.dummy_type) = 0; }
#line 4969 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 1467 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (lexer.m_reading_fcn_file)
                      {
                        // Delete the dummy statement_list we created
                        // after parsing the function.  Any function
                        // definitions found in the file have already
                        // been stored in the symbol table or in
                        // base_parser::m_primary_fcn_ptr.

                        // Unused symbol table context.
                        lexer.m_symtab_context.pop ();

                        delete (yyvsp[-1].tree_statement_list_type);
                      }
                    else
                      {
                        octave::tree_statement *end_of_script
                          = parser.make_end ("endscript", true,
                                             lexer.m_input_line_number,
                                             lexer.m_current_input_column);

                        parser.make_script ((yyvsp[-1].tree_statement_list_type), end_of_script);
                      }

                    (yyval.tree_command_type) = nullptr;
                  }
#line 5002 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 1496 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].punct_type));
                    YYUSE ((yyvsp[-2].punct_type));

                    // Unused symbol table context.
                    lexer.m_symtab_context.pop ();

                    parser.finish_classdef_file ((yyvsp[-4].tree_classdef_type), (yyvsp[-1].tree_statement_list_type));

                    (yyval.tree_command_type) = nullptr;
                  }
#line 5018 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 1514 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tok_val) = (yyvsp[0].tok_val);
                    if (lexer.m_reading_classdef_file
                        || lexer.m_parsing_classdef)
                      lexer.m_maybe_classdef_get_set_method = true;
                  }
#line 5029 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 1523 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string id = (yyvsp[0].tree_identifier_type)->name ();

                    // Make classdef local functions unique from
                    // classdef methods.

                    if (parser.m_parsing_local_functions
                        && parser.m_curr_fcn_depth == 1)
                      id = lexer.m_fcn_file_name + ">" + id;

                    if (! parser.m_function_scopes.name_current_scope (id))
                      {
                        parser.bison_error ("duplicate subfunction or nested function name",
                                            (yyvsp[0].tree_identifier_type)->line (), (yyvsp[0].tree_identifier_type)->column ());

                        delete (yyvsp[0].tree_identifier_type);

                        YYABORT;
                      }

                    octave::symbol_scope curr_scope
                      = lexer.m_symtab_context.curr_scope ();
                    curr_scope.cache_name (id);

                    lexer.m_parsed_function_name.top () = true;
                    lexer.m_maybe_classdef_get_set_method = false;

                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 5063 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 208:
#line 1553 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.m_parsed_function_name.top () = true;
                    lexer.m_maybe_classdef_get_set_method = false;
                    lexer.m_parsing_classdef_get_method = true;
                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 5076 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 209:
#line 1562 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.m_parsed_function_name.top () = true;
                    lexer.m_maybe_classdef_get_set_method = false;
                    lexer.m_parsing_classdef_set_method = true;
                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 5089 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 1573 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    parser.m_endfunction_found = true;

                    if (parser.end_token_ok ((yyvsp[0].tok_val), octave::token::function_end))
                      (yyval.tree_statement_type) = parser.make_end ("endfunction", false,
                                            (yyvsp[0].tok_val)->line (), (yyvsp[0].tok_val)->column ());
                    else
                      {
                        parser.end_token_error ((yyvsp[0].tok_val), octave::token::function_end);
                        YYABORT;
                      }
                  }
#line 5106 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 1586 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
// A lot of tests are based on the assumption that this is OK
//                  if (lexer.m_reading_script_file)
//                    {
//                      parser.bison_error ("function body open at end of script");
//                      YYABORT;
//                    }

                    if (parser.m_endfunction_found)
                      {
                        parser.bison_error ("inconsistent function endings -- "
                                 "if one function is explicitly ended, "
                                 "so must all the others");
                        YYABORT;
                      }

                    if (! (lexer.m_reading_fcn_file || lexer.m_reading_script_file
                           || lexer.input_from_eval_string ()))
                      {
                        parser.bison_error ("function body open at end of input");
                        YYABORT;
                      }

                    if (lexer.m_reading_classdef_file)
                      {
                        parser.bison_error ("classdef body open at end of input");
                        YYABORT;
                      }

                    (yyval.tree_statement_type) = parser.make_end ("endfunction", true,
                                          lexer.m_input_line_number,
                                          lexer.m_current_input_column);
                  }
#line 5144 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 1623 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyval.tree_function_def_type) = parser.make_function ((yyvsp[-6].tok_val), nullptr, (yyvsp[-4].tree_identifier_type), (yyvsp[-3].tree_parameter_list_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tree_statement_type), (yyvsp[-5].comment_type));
                  }
#line 5154 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 1630 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyval.tree_function_def_type) = parser.make_function ((yyvsp[-8].tok_val), (yyvsp[-6].tree_parameter_list_type), (yyvsp[-4].tree_identifier_type), (yyvsp[-3].tree_parameter_list_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tree_statement_type), (yyvsp[-7].comment_type));
                  }
#line 5165 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 1643 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! lexer.m_reading_classdef_file)
                      {
                        parser.bison_error ("classdef must appear inside a file containing only a class definition");
                        YYABORT;
                      }

                    // Create invalid parent scope.
                    lexer.m_symtab_context.push (octave::symbol_scope ());
                    lexer.m_parsing_classdef = true;
                    (yyval.tok_val) = (yyvsp[0].tok_val);
                  }
#line 5182 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 1658 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    lexer.m_parsing_classdef = false;

                    if (! ((yyval.tree_classdef_type) = parser.make_classdef ((yyvsp[-8].tok_val), (yyvsp[-6].tree_classdef_attribute_list_type), (yyvsp[-5].tree_identifier_type), (yyvsp[-4].tree_classdef_superclass_list_type), (yyvsp[-2].tree_classdef_body_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_classdef deleted $3, $4, $5, and $7.
                        YYABORT;
                      }
                  }
#line 5199 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 1671 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    lexer.m_parsing_classdef = false;

                    if (! ((yyval.tree_classdef_type) = parser.make_classdef ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-3].tree_identifier_type), (yyvsp[-2].tree_classdef_superclass_list_type), nullptr,
                                                      (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef deleted $3, $4, and $5.
                        YYABORT;
                      }
                  }
#line 5216 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 1686 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = nullptr; }
#line 5222 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 1688 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = (yyvsp[-1].tree_classdef_attribute_list_type); }
#line 5228 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 1692 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = new octave::tree_classdef_attribute_list ((yyvsp[0].tree_classdef_attribute_type)); }
#line 5234 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 1694 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_classdef_attribute_list_type)->append ((yyvsp[0].tree_classdef_attribute_type));
                    (yyval.tree_classdef_attribute_list_type) = (yyvsp[-2].tree_classdef_attribute_list_type);
                  }
#line 5243 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 1701 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_type) = new octave::tree_classdef_attribute ((yyvsp[0].tree_identifier_type)); }
#line 5249 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 1703 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.m_looking_at_initializer_expression = false;
                    (yyval.tree_classdef_attribute_type) = new octave::tree_classdef_attribute ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 5260 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 1710 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].tok_val));

                    (yyval.tree_classdef_attribute_type) = new octave::tree_classdef_attribute ((yyvsp[0].tree_identifier_type), false);
                  }
#line 5270 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 1719 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = nullptr; }
#line 5276 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 1721 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = (yyvsp[0].tree_classdef_superclass_list_type); }
#line 5282 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 1725 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.enable_fq_identifier ();
                  }
#line 5292 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 1731 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = new octave::tree_classdef_superclass_list ((yyvsp[0].tree_classdef_superclass_type)); }
#line 5298 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 1733 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.enable_fq_identifier ();
                  }
#line 5308 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 1739 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-3].tree_classdef_superclass_list_type)->append ((yyvsp[0].tree_classdef_superclass_type));
                    (yyval.tree_classdef_superclass_list_type) = (yyvsp[-3].tree_classdef_superclass_list_type);
                  }
#line 5317 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 1746 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_type) = new octave::tree_classdef_superclass ((yyvsp[0].tok_val)->text ()); }
#line 5323 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 1750 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new octave::tree_classdef_body ((yyvsp[0].tree_classdef_properties_block_type)); }
#line 5329 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 1752 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new octave::tree_classdef_body ((yyvsp[0].tree_classdef_methods_block_type)); }
#line 5335 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 1754 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new octave::tree_classdef_body ((yyvsp[0].tree_classdef_events_block_type)); }
#line 5341 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 1756 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new octave::tree_classdef_body ((yyvsp[0].tree_classdef_enum_block_type)); }
#line 5347 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 1758 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_properties_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5358 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 1765 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_methods_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5369 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 1772 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_events_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5380 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 1779 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_enum_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5391 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 1789 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_properties_block_type) = parser.make_classdef_properties_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_property_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_properties_block delete $3 and $5.
                        YYABORT;
                      }
                  }
#line 5407 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 1801 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_properties_block_type) = parser.make_classdef_properties_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), nullptr, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_properties_block delete $3.
                        YYABORT;
                      }
                  }
#line 5422 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 1815 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_property_list_type) = new octave::tree_classdef_property_list ((yyvsp[0].tree_classdef_property_type)); }
#line 5428 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 1817 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_property_list_type)->append ((yyvsp[0].tree_classdef_property_type));
                    (yyval.tree_classdef_property_list_type) = (yyvsp[-2].tree_classdef_property_list_type);
                  }
#line 5439 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 1826 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_property_type) = new octave::tree_classdef_property ((yyvsp[0].tree_identifier_type)); }
#line 5445 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 1828 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.m_looking_at_initializer_expression = false;
                    (yyval.tree_classdef_property_type) = new octave::tree_classdef_property ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 5456 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 1837 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_methods_block_type) = parser.make_classdef_methods_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_methods_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_methods_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5472 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 1849 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_methods_block_type) = parser.make_classdef_methods_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), nullptr, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_methods_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5487 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 1863 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.octave_user_function_type) = parser.start_classdef_external_method ((yyvsp[0].tree_identifier_type), nullptr)))
                      YYABORT;
                  }
#line 5496 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 1868 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.octave_user_function_type) = parser.start_classdef_external_method ((yyvsp[-1].tree_identifier_type), (yyvsp[0].tree_parameter_list_type))))
                      YYABORT;
                  }
#line 5505 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 1875 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = parser.finish_classdef_external_method ((yyvsp[0].octave_user_function_type), nullptr, (yyvsp[-1].comment_type)); }
#line 5511 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 1877 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.m_defining_func++;
                    lexer.m_parsed_function_name.push (false);
                  }
#line 5522 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 1884 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.m_defining_func--;
                    lexer.m_parsed_function_name.pop ();
                    (yyval.tree_function_def_type) = parser.finish_classdef_external_method ((yyvsp[0].octave_user_function_type), (yyvsp[-3].tree_parameter_list_type), (yyvsp[-4].comment_type));
                  }
#line 5532 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 1892 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = (yyvsp[0].tree_function_def_type); }
#line 5538 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 1894 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = (yyvsp[0].tree_function_def_type); }
#line 5544 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 1898 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    octave_value fcn;
                    if ((yyvsp[0].tree_function_def_type))
                      fcn = (yyvsp[0].tree_function_def_type)->function ();
                    delete (yyvsp[0].tree_function_def_type);
                    (yyval.tree_classdef_methods_list_type) = new octave::tree_classdef_methods_list (fcn);
                  }
#line 5556 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 1906 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    octave_value fcn;
                    if ((yyvsp[0].tree_function_def_type))
                      fcn = (yyvsp[0].tree_function_def_type)->function ();
                    delete (yyvsp[0].tree_function_def_type);

                    (yyvsp[-2].tree_classdef_methods_list_type)->append (fcn);
                    (yyval.tree_classdef_methods_list_type) = (yyvsp[-2].tree_classdef_methods_list_type);
                  }
#line 5572 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 1920 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_events_block_type) = parser.make_classdef_events_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_events_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_events_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5588 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 1932 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_events_block_type) = parser.make_classdef_events_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), nullptr, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_events_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5603 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 1945 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_events_list_type) = new octave::tree_classdef_events_list ((yyvsp[0].tree_classdef_event_type)); }
#line 5609 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 1947 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_events_list_type)->append ((yyvsp[0].tree_classdef_event_type));
                    (yyval.tree_classdef_events_list_type) = (yyvsp[-2].tree_classdef_events_list_type);
                  }
#line 5620 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 1956 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_event_type) = new octave::tree_classdef_event ((yyvsp[0].tree_identifier_type)); }
#line 5626 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 1960 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_enum_block_type) = parser.make_classdef_enum_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_enum_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_enum_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5642 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 1972 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_enum_block_type) = parser.make_classdef_enum_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), nullptr, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_enum_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5657 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 1985 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_enum_list_type) = new octave::tree_classdef_enum_list ((yyvsp[0].tree_classdef_enum_type)); }
#line 5663 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 1987 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_enum_list_type)->append ((yyvsp[0].tree_classdef_enum_type));
                    (yyval.tree_classdef_enum_list_type) = (yyvsp[-2].tree_classdef_enum_list_type);
                  }
#line 5674 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 1996 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_enum_type) = new octave::tree_classdef_enum ((yyvsp[-3].tree_identifier_type), (yyvsp[-1].tree_expression_type)); }
#line 5680 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 2004 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.m_at_beginning_of_statement = true;
                  }
#line 5689 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 2011 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.comment_type) = lexer.get_comment (); }
#line 5695 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 2015 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    std::string msg = (yyvsp[0].tok_val)->text ();
                    parser.bison_error (msg.c_str ());
                  }
#line 5705 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 2021 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.dummy_type) = 0; }
#line 5711 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 2025 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ','; }
#line 5717 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 2027 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ';'; }
#line 5723 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 2029 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5729 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 2031 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5735 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 2035 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5741 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 2037 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5747 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 2041 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5753 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 2043 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5759 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 2047 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = '\n'; }
#line 5765 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 2049 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5771 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 2053 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ','; }
#line 5777 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 2055 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ';'; }
#line 5783 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 2057 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = '\n'; }
#line 5789 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 2059 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5795 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 2061 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5801 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 2063 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5807 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 2067 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5813 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 2069 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5819 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;


#line 5823 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  yyps->yynew = 1;

yypushreturn:
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2072 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1906  */


#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
   // Restore prevailing warning state for remainder of the file.
#  pragma GCC diagnostic pop
#endif

// Generic error messages.

#undef lexer
#undef scanner

static void
yyerror (octave::base_parser& parser, const char *s)
{
  parser.bison_error (s);
}

namespace octave
{
  size_t
  base_parser::parent_scope_info::size (void) const
  {
    return m_info.size ();
  }

  void
  base_parser::parent_scope_info::push (const value_type& elt)
  {
    m_info.push_back (elt);
  }

  void
  base_parser::parent_scope_info::push (const symbol_scope& scope)
  {
    push (value_type (scope, ""));
  }

  void
  base_parser::parent_scope_info::pop (void)
  {
    m_info.pop_back ();
  }

  bool
  base_parser::parent_scope_info::name_ok (const std::string& name)
  {
    // Name can't be the same as any parent function or any other
    // function we've already seen.  We could maintain a complex
    // tree structure of names, or we can just store the set of
    // full names of all the functions, which must be unique.

    std::string full_name;

    for (size_t i = 0; i < size()-1; i++)
      {
        const value_type& elt = m_info[i];

        if (name == elt.second)
          return false;

        full_name += elt.second + ">";
      }

    full_name += name;

    if (m_all_names.find (full_name) != m_all_names.end ())
      return false;

    m_all_names.insert (full_name);

    return true;
  }

  bool
  base_parser::parent_scope_info::name_current_scope (const std::string& name)
  {
    if (! name_ok (name))
      return false;

    if (size () > 0)
      m_info.back().second = name;

    return true;
  }

  symbol_scope
  base_parser::parent_scope_info::parent_scope (void) const
  {
    return size () > 1 ? m_info[size()-2].first : symbol_scope ();
  }

  std::string
  base_parser::parent_scope_info::parent_name (void) const
  {
    return m_info[size()-2].second;
  }

  void base_parser::parent_scope_info::clear (void)
  {
    m_info.clear ();
    m_all_names.clear ();
  }

  base_parser::base_parser (base_lexer& lxr)
    : m_endfunction_found (false), m_autoloading (false),
      m_fcn_file_from_relative_lookup (false),
      m_parsing_subfunctions (false), m_parsing_local_functions (false),
      m_max_fcn_depth (0), m_curr_fcn_depth (0), m_primary_fcn_scope (),
      m_curr_class_name (), m_curr_package_name (), m_function_scopes (),
      m_primary_fcn_ptr (nullptr), m_subfunction_names (),
      m_classdef_object (nullptr), m_stmt_list (nullptr), m_lexer (lxr),
      m_parser_state (yypstate_new ())
  { }

  base_parser::~base_parser (void)
  {
    delete m_stmt_list;

    delete &m_lexer;

    // FIXME: Deleting the internal Bison parser state structure does
    // not clean up any partial parse trees in the event of an interrupt or
    // error.  It's not clear how to safely do that with the C language
    // parser that Bison generates.  The C++ language parser that Bison
    // generates would do it for us automatically whenever an exception
    // is thrown while parsing input, but there is currently no C++
    // interface for a push parser.

    yypstate_delete (static_cast<yypstate *> (m_parser_state));
  }

  void
  base_parser::reset (void)
  {
    m_endfunction_found = false;
    m_autoloading = false;
    m_fcn_file_from_relative_lookup = false;
    m_parsing_subfunctions = false;
    m_parsing_local_functions = false;
    m_max_fcn_depth = 0;
    m_curr_fcn_depth = 0;
    m_primary_fcn_scope = symbol_scope ();
    m_curr_class_name = "";
    m_curr_package_name = "";
    m_function_scopes.clear ();
    m_primary_fcn_ptr  = nullptr;
    m_subfunction_names.clear ();
    m_classdef_object = nullptr;

    delete m_stmt_list;
    m_stmt_list = nullptr;

    m_lexer.reset ();

    yypstate_delete (static_cast<yypstate *> (m_parser_state));
    m_parser_state = yypstate_new ();
  }
}

// Error mesages for mismatched end tokens.

static std::string
end_token_as_string (octave::token::end_tok_type ettype)
{
  std::string retval = "<unknown>";

  switch (ettype)
    {
    case octave::token::simple_end:
      retval = "end";
      break;

    case octave::token::classdef_end:
      retval = "endclassdef";
      break;

    case octave::token::enumeration_end:
      retval = "endenumeration";
      break;

    case octave::token::events_end:
      retval = "endevents";
      break;

    case octave::token::for_end:
      retval = "endfor";
      break;

    case octave::token::function_end:
      retval = "endfunction";
      break;

    case octave::token::if_end:
      retval = "endif";
      break;

    case octave::token::methods_end:
      retval = "endmethods";
      break;

    case octave::token::parfor_end:
      retval = "endparfor";
      break;

    case octave::token::properties_end:
      retval = "endproperties";
      break;

    case octave::token::switch_end:
      retval = "endswitch";
      break;

    case octave::token::try_catch_end:
      retval = "end_try_catch";
      break;

    case octave::token::unwind_protect_end:
      retval = "end_unwind_protect";
      break;

    case octave::token::while_end:
      retval = "endwhile";
      break;

    default:
      panic_impossible ();
      break;
    }

  return retval;
}

namespace octave
{
  void
  base_parser::end_token_error (token *tok, token::end_tok_type expected)
  {
    std::string msg = ("'" + end_token_as_string (expected)
                       + "' command matched by '"
                       + end_token_as_string (tok->ettype ()) + "'");

    bison_error (msg, tok->line (), tok->column ());
  }

  // Check to see that end tokens are properly matched.

  bool
  base_parser::end_token_ok (token *tok, token::end_tok_type expected)
  {
    token::end_tok_type ettype = tok->ettype ();

    return ettype == expected || ettype == token::simple_end;
  }

  // Maybe print a warning if an assignment expression is used as the
  // test in a logical expression.

  void
  base_parser::maybe_warn_assign_as_truth_value (tree_expression *expr)
  {
    if (expr->is_assignment_expression ()
        && expr->paren_count () < 2)
      {
        if (m_lexer.m_fcn_file_full_name.empty ())
          warning_with_id
            ("Octave:assign-as-truth-value",
             "suggest parenthesis around assignment used as truth value");
        else
          warning_with_id
            ("Octave:assign-as-truth-value",
             "suggest parenthesis around assignment used as truth value near line %d, column %d in file '%s'",
             expr->line (), expr->column (), m_lexer.m_fcn_file_full_name.c_str ());
      }
  }

  // Maybe print a warning about switch labels that aren't constants.

  void
  base_parser::maybe_warn_variable_switch_label (tree_expression *expr)
  {
    if (! expr->is_constant ())
      {
        if (m_lexer.m_fcn_file_full_name.empty ())
          warning_with_id ("Octave:variable-switch-label",
                           "variable switch label");
        else
          warning_with_id
            ("Octave:variable-switch-label",
             "variable switch label near line %d, column %d in file '%s'",
             expr->line (), expr->column (), m_lexer.m_fcn_file_full_name.c_str ());
      }
  }

  // Make a constant.

  tree_constant *
  base_parser::make_constant (int op, token *tok_val)
  {
    int l = tok_val->line ();
    int c = tok_val->column ();

    tree_constant *retval = nullptr;

    switch (op)
      {
      case NUM:
        {
          octave_value tmp (tok_val->number ());
          retval = new tree_constant (tmp, l, c);
          retval->stash_original_text (tok_val->text_rep ());
        }
        break;

      case IMAG_NUM:
        {
          octave_value tmp (Complex (0.0, tok_val->number ()));
          retval = new tree_constant (tmp, l, c);
          retval->stash_original_text (tok_val->text_rep ());
        }
        break;

      case DQ_STRING:
      case SQ_STRING:
        {
          std::string txt = tok_val->text ();

          char delim = op == DQ_STRING ? '"' : '\'';
          octave_value tmp (txt, delim);

          if (txt.empty ())
            {
              if (op == DQ_STRING)
                tmp = octave_null_str::instance;
              else
                tmp = octave_null_sq_str::instance;
            }

          retval = new tree_constant (tmp, l, c);

          if (op == DQ_STRING)
            txt = undo_string_escapes (txt);

          // FIXME: maybe this should also be handled by
          // tok_val->text_rep () for character strings?
          retval->stash_original_text (delim + txt + delim);
        }
        break;

      default:
        panic_impossible ();
        break;
      }

    return retval;
  }

  // Make a function handle.

  tree_fcn_handle *
  base_parser::make_fcn_handle (token *tok_val)
  {
    int l = tok_val->line ();
    int c = tok_val->column ();

    tree_fcn_handle *retval = new tree_fcn_handle (tok_val->text (), l, c);

    return retval;
  }

  // Make an anonymous function handle.

  tree_anon_fcn_handle *
  base_parser::make_anon_fcn_handle (tree_parameter_list *param_list,
                                     tree_expression *expr)
  {
    // FIXME: need to get these from the location of the @ symbol.
    int l = m_lexer.m_input_line_number;
    int c = m_lexer.m_current_input_column;

    symbol_scope fcn_scope = m_lexer.m_symtab_context.curr_scope ();
    symbol_scope parent_scope = m_lexer.m_symtab_context.parent_scope ();

    m_lexer.m_symtab_context.pop ();

    expr->set_print_flag (false);

    fcn_scope.mark_static ();

    tree_anon_fcn_handle *retval
      = new tree_anon_fcn_handle (param_list, expr, fcn_scope,
                                  parent_scope, l, c);

    std::ostringstream buf;

    tree_print_code tpc (buf);

    retval->accept (tpc);

    std::string file = m_lexer.m_fcn_file_full_name;
    if (! file.empty ())
      buf << ": file: " << file;
    else if (m_lexer.input_from_terminal ())
      buf << ": *terminal input*";
    else if (m_lexer.input_from_eval_string ())
      buf << ": *eval string*";
    buf << ": line: " << l << " column: " << c;

    std::string scope_name = buf.str ();

    fcn_scope.cache_name (scope_name);

    // FIXME: Stash the filename.  This does not work and produces
    // errors when executed.
    //retval->stash_file_name (m_lexer.m_fcn_file_name);

    return retval;
  }

  // Build a colon expression.

  tree_expression *
  base_parser::make_colon_expression (tree_expression *base,
                                      tree_expression *limit,
                                      tree_expression *incr)
  {
    tree_expression *retval = nullptr;

    unwind_protect frame;

    frame.protect_var (discard_error_messages);
    frame.protect_var (discard_warning_messages);

    discard_error_messages = true;
    discard_warning_messages = true;

    if (! base || ! limit)
      {
        delete base;
        delete limit;
        delete incr;

        return retval;
      }

    int l = base->line ();
    int c = base->column ();

    tree_colon_expression *e
      = new tree_colon_expression (base, limit, incr, l, c);

    if (base->is_constant () && limit->is_constant ()
        && (! incr || (incr && incr->is_constant ())))
      {
        try
          {
            tree_evaluator& tw
              = __get_evaluator__ ("finish_colon_expression");

            octave_value tmp = tw.evaluate (e);

            tree_constant *tc_retval
              = new tree_constant (tmp, e->line (), e->column ());

            std::ostringstream buf;

            tree_print_code tpc (buf);

            e->accept (tpc);

            tc_retval->stash_original_text (buf.str ());

            delete e;

            retval = tc_retval;
          }
        catch (const execution_exception&)
          {
            interpreter::recover_from_exception ();
          }
      }
    else
      retval = e;

    return retval;
  }

  // Build a binary expression.

  tree_expression *
  base_parser::make_binary_op (int op, tree_expression *op1,
                               token *tok_val, tree_expression *op2)
  {
    octave_value::binary_op t = octave_value::unknown_binary_op;

    switch (op)
      {
      case POW:
        t = octave_value::op_pow;
        break;

      case EPOW:
        t = octave_value::op_el_pow;
        break;

      case '+':
        t = octave_value::op_add;
        break;

      case '-':
        t = octave_value::op_sub;
        break;

      case '*':
        t = octave_value::op_mul;
        break;

      case '/':
        t = octave_value::op_div;
        break;

      case EMUL:
        t = octave_value::op_el_mul;
        break;

      case EDIV:
        t = octave_value::op_el_div;
        break;

      case LEFTDIV:
        t = octave_value::op_ldiv;
        break;

      case ELEFTDIV:
        t = octave_value::op_el_ldiv;
        break;

      case EXPR_LT:
        t = octave_value::op_lt;
        break;

      case EXPR_LE:
        t = octave_value::op_le;
        break;

      case EXPR_EQ:
        t = octave_value::op_eq;
        break;

      case EXPR_GE:
        t = octave_value::op_ge;
        break;

      case EXPR_GT:
        t = octave_value::op_gt;
        break;

      case EXPR_NE:
        t = octave_value::op_ne;
        break;

      case EXPR_AND:
        t = octave_value::op_el_and;
        break;

      case EXPR_OR:
        t = octave_value::op_el_or;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_binary_expression (op1, op2, l, c, t);
  }

  // Build a boolean expression.

  tree_expression *
  base_parser::make_boolean_op (int op, tree_expression *op1,
                                token *tok_val, tree_expression *op2)
  {
    tree_boolean_expression::type t;

    switch (op)
      {
      case EXPR_AND_AND:
        t = tree_boolean_expression::bool_and;
        break;

      case EXPR_OR_OR:
        t = tree_boolean_expression::bool_or;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_boolean_expression (op1, op2, l, c, t);
  }

  // Build a prefix expression.

  tree_expression *
  base_parser::make_prefix_op (int op, tree_expression *op1, token *tok_val)
  {
    octave_value::unary_op t = octave_value::unknown_unary_op;

    switch (op)
      {
      case EXPR_NOT:
        t = octave_value::op_not;
        break;

      case '+':
        t = octave_value::op_uplus;
        break;

      case '-':
        t = octave_value::op_uminus;
        break;

      case PLUS_PLUS:
        t = octave_value::op_incr;
        break;

      case MINUS_MINUS:
        t = octave_value::op_decr;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_prefix_expression (op1, l, c, t);
  }

  // Build a postfix expression.

  tree_expression *
  base_parser::make_postfix_op (int op, tree_expression *op1, token *tok_val)
  {
    octave_value::unary_op t = octave_value::unknown_unary_op;

    switch (op)
      {
      case HERMITIAN:
        t = octave_value::op_hermitian;
        break;

      case TRANSPOSE:
        t = octave_value::op_transpose;
        break;

      case PLUS_PLUS:
        t = octave_value::op_incr;
        break;

      case MINUS_MINUS:
        t = octave_value::op_decr;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_postfix_expression (op1, l, c, t);
  }

  // Build an unwind-protect command.

  tree_command *
  base_parser::make_unwind_command (token *unwind_tok,
                                    tree_statement_list *body,
                                    tree_statement_list *cleanup_stmts,
                                    token *end_tok,
                                    comment_list *lc,
                                    comment_list *mc)
  {
    tree_command *retval = nullptr;

    if (end_token_ok (end_tok, token::unwind_protect_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = unwind_tok->line ();
        int c = unwind_tok->column ();

        retval = new tree_unwind_protect_command (body, cleanup_stmts,
                                                  lc, mc, tc, l, c);
      }
    else
      {
        delete body;
        delete cleanup_stmts;

        end_token_error (end_tok, token::unwind_protect_end);
      }

    return retval;
  }

  // Build a try-catch command.

  tree_command *
  base_parser::make_try_command (token *try_tok,
                                 tree_statement_list *body,
                                 char catch_sep,
                                 tree_statement_list *cleanup_stmts,
                                 token *end_tok,
                                 comment_list *lc,
                                 comment_list *mc)
  {
    tree_command *retval = nullptr;

    if (end_token_ok (end_tok, token::try_catch_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = try_tok->line ();
        int c = try_tok->column ();

        tree_identifier *id = nullptr;

        if (! catch_sep && cleanup_stmts && ! cleanup_stmts->empty ())
          {
            tree_statement *stmt = cleanup_stmts->front ();

            if (stmt)
              {
                tree_expression *expr = stmt->expression ();

                if (expr && expr->is_identifier ())
                  {
                    id = dynamic_cast<tree_identifier *> (expr);

                    cleanup_stmts->pop_front ();

                    stmt->set_expression (nullptr);
                    delete stmt;
                  }
              }
          }

        retval = new tree_try_catch_command (body, cleanup_stmts, id,
                                             lc, mc, tc, l, c);
      }
    else
      {
        delete body;
        delete cleanup_stmts;

        end_token_error (end_tok, token::try_catch_end);
      }

    return retval;
  }

  // Build a while command.

  tree_command *
  base_parser::make_while_command (token *while_tok,
                                   tree_expression *expr,
                                   tree_statement_list *body,
                                   token *end_tok,
                                   comment_list *lc)
  {
    tree_command *retval = nullptr;

    maybe_warn_assign_as_truth_value (expr);

    if (end_token_ok (end_tok, token::while_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        m_lexer.m_looping--;

        int l = while_tok->line ();
        int c = while_tok->column ();

        retval = new tree_while_command (expr, body, lc, tc, l, c);
      }
    else
      {
        delete expr;
        delete body;

        end_token_error (end_tok, token::while_end);
      }

    return retval;
  }

  // Build a do-until command.

  tree_command *
  base_parser::make_do_until_command (token *until_tok,
                                      tree_statement_list *body,
                                      tree_expression *expr,
                                      comment_list *lc)
  {
    maybe_warn_assign_as_truth_value (expr);

    comment_list *tc = m_lexer.m_comment_buf.get_comment ();

    m_lexer.m_looping--;

    int l = until_tok->line ();
    int c = until_tok->column ();

    return new tree_do_until_command (expr, body, lc, tc, l, c);
  }

  // Build a for command.

  tree_command *
  base_parser::make_for_command (int tok_id, token *for_tok,
                                 tree_argument_list *lhs,
                                 tree_expression *expr,
                                 tree_expression *maxproc,
                                 tree_statement_list *body,
                                 token *end_tok,
                                 comment_list *lc)
  {
    tree_command *retval = nullptr;

    bool parfor = tok_id == PARFOR;

    if (end_token_ok (end_tok, parfor ? token::parfor_end : token::for_end))
      {
        expr->mark_as_for_cmd_expr ();

        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        m_lexer.m_looping--;

        int l = for_tok->line ();
        int c = for_tok->column ();

        if (lhs->length () == 1)
          {
            tree_expression *tmp = lhs->remove_front ();

            retval = new tree_simple_for_command (parfor, tmp, expr, maxproc,
                                                  body, lc, tc, l, c);

            delete lhs;
          }
        else
          {
            if (parfor)
              {
                delete lhs;
                delete expr;
                delete maxproc;
                delete body;

                bison_error ("invalid syntax for parfor statement");
              }
            else
              retval = new tree_complex_for_command (lhs, expr, body,
                                                     lc, tc, l, c);
          }
      }
    else
      {
        delete lhs;
        delete expr;
        delete maxproc;
        delete body;

        end_token_error (end_tok, parfor ? token::parfor_end : token::for_end);
      }

    return retval;
  }

  // Build a break command.

  tree_command *
  base_parser::make_break_command (token *break_tok)
  {
    int l = break_tok->line ();
    int c = break_tok->column ();

    if (! m_lexer.m_looping)
      {
        bison_error ("break must appear in a loop in the same file as loop command");
        return nullptr;
      }
    else
      return new tree_break_command (l, c);
  }

  // Build a continue command.

  tree_command *
  base_parser::make_continue_command (token *continue_tok)
  {
    int l = continue_tok->line ();
    int c = continue_tok->column ();

    return new tree_continue_command (l, c);
  }

  // Build a return command.

  tree_command *
  base_parser::make_return_command (token *return_tok)
  {
    int l = return_tok->line ();
    int c = return_tok->column ();

    return new tree_return_command (l, c);
  }

  // Start an if command.

  tree_if_command_list *
  base_parser::start_if_command (tree_expression *expr,
                                 tree_statement_list *list)
  {
    maybe_warn_assign_as_truth_value (expr);

    tree_if_clause *t = new tree_if_clause (expr, list);

    return new tree_if_command_list (t);
  }

  // Finish an if command.

  tree_if_command *
  base_parser::finish_if_command (token *if_tok,
                                  tree_if_command_list *list,
                                  token *end_tok,
                                  comment_list *lc)
  {
    tree_if_command *retval = nullptr;

    if (end_token_ok (end_tok, token::if_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = if_tok->line ();
        int c = if_tok->column ();

        if (list && ! list->empty ())
          {
            tree_if_clause *elt = list->front ();

            if (elt)
              {
                elt->line (l);
                elt->column (c);
              }
          }

        retval = new tree_if_command (list, lc, tc, l, c);
      }
    else
      {
        delete list;

        end_token_error (end_tok, token::if_end);
      }

    return retval;
  }

  // Build an elseif clause.

  tree_if_clause *
  base_parser::make_elseif_clause (token *elseif_tok,
                                   tree_expression *expr,
                                   tree_statement_list *list,
                                   comment_list *lc)
  {
    maybe_warn_assign_as_truth_value (expr);

    int l = elseif_tok->line ();
    int c = elseif_tok->column ();

    return new tree_if_clause (expr, list, lc, l, c);
  }

  // Finish a switch command.

  tree_switch_command *
  base_parser::finish_switch_command (token *switch_tok,
                                      tree_expression *expr,
                                      tree_switch_case_list *list,
                                      token *end_tok,
                                      comment_list *lc)
  {
    tree_switch_command *retval = nullptr;

    if (end_token_ok (end_tok, token::switch_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = switch_tok->line ();
        int c = switch_tok->column ();

        if (list && ! list->empty ())
          {
            tree_switch_case *elt = list->front ();

            if (elt)
              {
                elt->line (l);
                elt->column (c);
              }
          }

        retval = new tree_switch_command (expr, list, lc, tc, l, c);
      }
    else
      {
        delete expr;
        delete list;

        end_token_error (end_tok, token::switch_end);
      }

    return retval;
  }

  // Build a switch case.

  tree_switch_case *
  base_parser::make_switch_case (token *case_tok,
                                 tree_expression *expr,
                                 tree_statement_list *list,
                                 comment_list *lc)
  {
    maybe_warn_variable_switch_label (expr);

    int l = case_tok->line ();
    int c = case_tok->column ();

    return new tree_switch_case (expr, list, lc, l, c);
  }

  // Build an assignment to a variable.

  tree_expression *
  base_parser::make_assign_op (int op, tree_argument_list *lhs,
                               token *eq_tok, tree_expression *rhs)
  {
    octave_value::assign_op t = octave_value::unknown_assign_op;

    switch (op)
      {
      case '=':
        t = octave_value::op_asn_eq;
        break;

      case ADD_EQ:
        t = octave_value::op_add_eq;
        break;

      case SUB_EQ:
        t = octave_value::op_sub_eq;
        break;

      case MUL_EQ:
        t = octave_value::op_mul_eq;
        break;

      case DIV_EQ:
        t = octave_value::op_div_eq;
        break;

      case LEFTDIV_EQ:
        t = octave_value::op_ldiv_eq;
        break;

      case POW_EQ:
        t = octave_value::op_pow_eq;
        break;

      case EMUL_EQ:
        t = octave_value::op_el_mul_eq;
        break;

      case EDIV_EQ:
        t = octave_value::op_el_div_eq;
        break;

      case ELEFTDIV_EQ:
        t = octave_value::op_el_ldiv_eq;
        break;

      case EPOW_EQ:
        t = octave_value::op_el_pow_eq;
        break;

      case AND_EQ:
        t = octave_value::op_el_and_eq;
        break;

      case OR_EQ:
        t = octave_value::op_el_or_eq;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = eq_tok->line ();
    int c = eq_tok->column ();

    if (! lhs->is_simple_assign_lhs () && t != octave_value::op_asn_eq)
      {
        // Multiple assignments like [x,y] OP= rhs are only valid for
        // '=', not '+=', etc.

        delete lhs;
        delete rhs;

        bison_error ("computed multiple assignment not allowed", l, c);

        return nullptr;
      }

    if (lhs->is_simple_assign_lhs ())
      {
        // We are looking at a simple assignment statement like x = rhs;

        tree_expression *tmp = lhs->remove_front ();

        if ((tmp->is_identifier () || tmp->is_index_expression ())
            && is_keyword (tmp->name ()))
          {
            std::string kw = tmp->name ();

            delete tmp;
            delete lhs;
            delete rhs;

            bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);

            return nullptr;
          }

        delete lhs;

        return new tree_simple_assignment (tmp, rhs, false, l, c, t);
      }
    else
      {
        std::list<std::string> names = lhs->variable_names ();

        for (const auto& kw : names)
          {
            if (is_keyword (kw))
              {
                delete lhs;
                delete rhs;

                bison_error ("invalid assignment to keyword \"" + kw + "\"",
                             l, c);

                return nullptr;
              }
          }

        return new tree_multi_assignment (lhs, rhs, false, l, c);
      }
  }

  // Define a script.

  void
  base_parser::make_script (tree_statement_list *cmds,
                            tree_statement *end_script)
  {
    if (! cmds)
      cmds = new tree_statement_list ();

    cmds->append (end_script);

    symbol_scope script_scope = m_lexer.m_symtab_context.curr_scope ();

    script_scope.cache_name (m_lexer.m_fcn_file_full_name);

    octave_user_script *script
      = new octave_user_script (m_lexer.m_fcn_file_full_name,
                                m_lexer.m_fcn_file_name, script_scope,
                                cmds, m_lexer.m_help_text);

    m_lexer.m_symtab_context.pop ();
    m_lexer.m_help_text = "";

    sys::time now;

    script->stash_fcn_file_time (now);

    m_primary_fcn_ptr = script;
  }

  // Define a function.

  // FIXME: combining start_function, finish_function, and
  // recover_from_parsing_function should be possible, but it makes
  // for a large mess.  Maybe this could be a bit better organized?

  tree_function_def *
  base_parser::make_function (token *fcn_tok,
                              tree_parameter_list *ret_list,
                              tree_identifier *id,
                              tree_parameter_list *param_list,
                              tree_statement_list *body,
                              tree_statement *end_fcn_stmt,
                              comment_list *lc)
  {
    tree_function_def *retval = nullptr;

    int l = fcn_tok->line ();
    int c = fcn_tok->column ();

    octave_user_function *tmp_fcn
      = start_function (id, param_list, body, end_fcn_stmt);

    retval = finish_function (ret_list, tmp_fcn, lc, l, c);

    recover_from_parsing_function ();

    return retval;
  }

  // Begin defining a function.

  octave_user_function *
  base_parser::start_function (tree_identifier *id,
                               tree_parameter_list *param_list,
                               tree_statement_list *body,
                               tree_statement *end_fcn_stmt)
  {
    // We'll fill in the return list later.

    std::string id_name = id->name ();

    delete id;

    if (m_lexer.m_parsing_classdef_get_method)
      id_name.insert (0, "get.");
    else if (m_lexer.m_parsing_classdef_set_method)
      id_name.insert (0, "set.");

    m_lexer.m_parsing_classdef_get_method = false;
    m_lexer.m_parsing_classdef_set_method = false;

    if (! body)
      body = new tree_statement_list ();

    body->append (end_fcn_stmt);

    octave_user_function *fcn
      = new octave_user_function (m_lexer.m_symtab_context.curr_scope (),
                                  param_list, nullptr, body);

    if (fcn)
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        fcn->stash_trailing_comment (tc);
        fcn->stash_fcn_end_location (end_fcn_stmt->line (),
                                     end_fcn_stmt->column ());
      }

    // If input is coming from a file, issue a warning if the name of
    // the file does not match the name of the function stated in the
    // file.  Matlab doesn't provide a diagnostic (it ignores the stated
    // name).
    if (! m_autoloading && m_lexer.m_reading_fcn_file
        && m_curr_fcn_depth == 1 && ! m_parsing_subfunctions)
      {
        // FIXME: should m_lexer.m_fcn_file_name already be
        // preprocessed when we get here?  It seems to only be a
        // problem with relative filenames.

        std::string nm = m_lexer.m_fcn_file_name;

        size_t pos = nm.find_last_of (sys::file_ops::dir_sep_chars ());

        if (pos != std::string::npos)
          nm = m_lexer.m_fcn_file_name.substr (pos+1);

        if (nm != id_name)
          {
            warning_with_id
              ("Octave:function-name-clash",
               "function name '%s' does not agree with function filename '%s'",
               id_name.c_str (), m_lexer.m_fcn_file_full_name.c_str ());

            id_name = nm;
          }
      }

    if (m_lexer.m_reading_fcn_file || m_lexer.m_reading_classdef_file || m_autoloading)
      {
        sys::time now;

        fcn->stash_fcn_file_name (m_lexer.m_fcn_file_full_name);
        fcn->stash_fcn_file_time (now);
        fcn->stash_dir_name (m_lexer.m_dir_name);
        fcn->stash_package_name (m_lexer.m_package_name);
        fcn->mark_as_system_fcn_file ();

        if (m_fcn_file_from_relative_lookup)
          fcn->mark_relative ();

        if (m_lexer.m_parsing_class_method)
          {
            if (m_curr_class_name == id_name)
              fcn->mark_as_class_constructor ();
            else
              fcn->mark_as_class_method ();

            fcn->stash_dispatch_class (m_curr_class_name);
          }

        std::string nm = fcn->fcn_file_name ();

        sys::file_stat fs (nm);

        if (fs && fs.is_newer (now))
          warning_with_id ("Octave:future-time-stamp",
                           "time stamp for '%s' is in the future", nm.c_str ());
      }
    else if (! input_from_tmp_history_file
             && ! m_lexer.m_force_script
             && m_lexer.m_reading_script_file
             && m_lexer.m_fcn_file_name == id_name)
      {
        warning ("function '%s' defined within script file '%s'",
                 id_name.c_str (), m_lexer.m_fcn_file_full_name.c_str ());
      }

    fcn->stash_function_name (id_name);

    // Record help text for functions other than nested functions.
    // We cannot currently record help for nested functions (bug #46008)
    // because the doc_string of the outermost function is read first,
    // whereas this function is called for the innermost function first.
    // We could have a stack of help_text in lexer.
    if (! m_lexer.m_help_text.empty () && m_curr_fcn_depth == 1)
      {
        fcn->document (m_lexer.m_help_text);

        m_lexer.m_help_text = "";
      }

    if (m_lexer.m_reading_fcn_file && m_curr_fcn_depth == 1
        && ! m_parsing_subfunctions)
      m_primary_fcn_ptr = fcn;

    return fcn;
  }

  tree_statement *
  base_parser::make_end (const std::string& type, bool eof, int l, int c)
  {
    return make_statement (new tree_no_op_command (type, eof, l, c));
  }

  tree_function_def *
  base_parser::finish_function (tree_parameter_list *ret_list,
                                octave_user_function *fcn,
                                comment_list *lc,
                                int l, int c)
  {
    tree_function_def *retval = nullptr;

    if (ret_list)
      ret_list->mark_as_formal_parameters ();

    if (fcn)
      {
        std::string nm = fcn->name ();
        std::string file = fcn->fcn_file_name ();

        std::string tmp = nm;
        if (! file.empty ())
          tmp += ": " + file;

        symbol_scope fcn_scope = fcn->scope ();
        fcn_scope.cache_name (tmp);

        if (lc)
          fcn->stash_leading_comment (lc);

        fcn->define_ret_list (ret_list);

        if (m_curr_fcn_depth > 1 || m_parsing_subfunctions)
          {
            fcn->stash_fcn_location (l, c);
            fcn->stash_parent_fcn_name (m_lexer.m_fcn_file_name);

            octave_value ov_fcn (fcn);

            if (m_endfunction_found && m_function_scopes.size () > 1)
              {
                fcn->mark_as_nested_function ();
                fcn_scope.mark_nested ();

                symbol_scope pscope = m_function_scopes.parent_scope ();
                fcn_scope.set_parent (pscope);
                pscope.install_nestfunction (nm, ov_fcn, fcn_scope);
              }
            else
              {
                fcn->mark_as_subfunction ();
                m_subfunction_names.push_back (nm);
                fcn_scope.set_parent (m_primary_fcn_scope);
                m_primary_fcn_scope.install_subfunction (nm, ov_fcn);
              }
          }

        if (m_curr_fcn_depth == 1)
          fcn_scope.update_nest ();

        if (! m_lexer.m_reading_fcn_file && m_curr_fcn_depth == 1)
          {
            // We are either reading a script file or defining a function
            // at the command line, so this definition creates a
            // tree_function object that is placed in the parse tree.
            // Otherwise, it is just inserted in the symbol table,
            // either as a subfunction or nested function (see above),
            // or as the primary function for the file, via
            // m_primary_fcn_ptr (see also load_fcn_from_file,,
            // parse_fcn_file, and
            // fcn_info::fcn_info_rep::find_user_function).

            if (m_lexer.m_buffer_function_text)
              {
                fcn->cache_function_text (m_lexer.m_function_text,
                                          fcn->time_parsed ());
                m_lexer.m_buffer_function_text = false;
              }

            retval = new tree_function_def (fcn);
          }
      }

    return retval;
  }

  void
  base_parser::recover_from_parsing_function (void)
  {
    m_lexer.m_symtab_context.pop ();

    if (m_lexer.m_reading_fcn_file && m_curr_fcn_depth == 1
        && ! m_parsing_subfunctions)
      m_parsing_subfunctions = true;

    m_curr_fcn_depth--;
    m_function_scopes.pop ();

    m_lexer.m_defining_func--;
    m_lexer.m_parsed_function_name.pop ();
    m_lexer.m_looking_at_return_list = false;
    m_lexer.m_looking_at_parameter_list = false;
  }

  tree_funcall *
  base_parser::make_superclass_ref (const std::string& method_nm,
                                    const std::string& class_nm)
  {
    octave_value_list args;

    args(1) = class_nm;
    args(0) = method_nm;

    symbol_table& symtab
      = __get_symbol_table__ ("base_parser::make_superclass_ref");

    octave_value fcn
      = symtab.find_built_in_function ("__superclass_reference__");

    return new tree_funcall (fcn, args);
  }

  tree_funcall *
  base_parser::make_meta_class_query (const std::string& class_nm)
  {
    octave_value_list args;

    args(0) = class_nm;

    symbol_table& symtab
      = __get_symbol_table__ ("base_parser::make_meta_class_query");

    octave_value fcn
      = symtab.find_built_in_function ("__meta_class_query__");

    return new tree_funcall (fcn, args);
  }

  // A CLASSDEF block defines a class that has a constructor and other
  // methods, but it is not an executable command.  Parsing the block
  // makes some changes in the symbol table (inserting the constructor
  // and methods, and adding to the list of known objects) and creates
  // a parse tree containing meta information about the class.

  tree_classdef *
  base_parser::make_classdef (token *tok_val,
                              tree_classdef_attribute_list *a,
                              tree_identifier *id,
                              tree_classdef_superclass_list *sc,
                              tree_classdef_body *body, token *end_tok,
                              comment_list *lc)
  {
    tree_classdef *retval = nullptr;

    m_lexer.m_symtab_context.pop ();

    std::string cls_name = id->name ();

    std::string nm = m_lexer.m_fcn_file_name;

    size_t pos = nm.find_last_of (sys::file_ops::dir_sep_chars ());

    if (pos != std::string::npos)
      nm = m_lexer.m_fcn_file_name.substr (pos+1);

    if (nm != cls_name)
      {
        delete a;
        delete id;
        delete sc;
        delete body;

        bison_error ("invalid classdef definition, the class name must match the filename");

      }
    else
      {
        if (end_token_ok (end_tok, token::classdef_end))
          {
            comment_list *tc = m_lexer.m_comment_buf.get_comment ();

            int l = tok_val->line ();
            int c = tok_val->column ();

            if (! body)
              body = new tree_classdef_body ();

            retval = new tree_classdef (a, id, sc, body, lc, tc,
                                        m_curr_package_name, l, c);
          }
        else
          {
            delete a;
            delete id;
            delete sc;
            delete body;

            end_token_error (end_tok, token::switch_end);
          }
      }

    return retval;
  }

  tree_classdef_properties_block *
  base_parser::make_classdef_properties_block (token *tok_val,
                                               tree_classdef_attribute_list *a,
                                               tree_classdef_property_list *plist,
                                               token *end_tok,
                                               comment_list *lc)
  {
    tree_classdef_properties_block *retval = nullptr;

    if (end_token_ok (end_tok, token::properties_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! plist)
          plist = new tree_classdef_property_list ();

        retval = new tree_classdef_properties_block (a, plist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete plist;

        end_token_error (end_tok, token::properties_end);
      }

    return retval;
  }

  tree_classdef_methods_block *
  base_parser::make_classdef_methods_block (token *tok_val,
                                            tree_classdef_attribute_list *a,
                                            tree_classdef_methods_list *mlist,
                                            token *end_tok,
                                            comment_list *lc)
  {
    tree_classdef_methods_block *retval = nullptr;

    if (end_token_ok (end_tok, token::methods_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! mlist)
          mlist = new tree_classdef_methods_list ();

        retval = new tree_classdef_methods_block (a, mlist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete mlist;

        end_token_error (end_tok, token::methods_end);
      }

    return retval;
  }

  tree_classdef_events_block *
  base_parser::make_classdef_events_block (token *tok_val,
                                           tree_classdef_attribute_list *a,
                                           tree_classdef_events_list *elist,
                                           token *end_tok,
                                           comment_list *lc)
  {
    tree_classdef_events_block *retval = nullptr;

    if (end_token_ok (end_tok, token::events_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! elist)
          elist = new tree_classdef_events_list ();

        retval = new tree_classdef_events_block (a, elist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete elist;

        end_token_error (end_tok, token::events_end);
      }

    return retval;
  }

  tree_classdef_enum_block *
  base_parser::make_classdef_enum_block (token *tok_val,
                                         tree_classdef_attribute_list *a,
                                         tree_classdef_enum_list *elist,
                                         token *end_tok,
                                         comment_list *lc)
  {
    tree_classdef_enum_block *retval = nullptr;

    if (end_token_ok (end_tok, token::enumeration_end))
      {
        comment_list *tc = m_lexer.m_comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! elist)
          elist = new tree_classdef_enum_list ();

        retval = new tree_classdef_enum_block (a, elist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete elist;

        end_token_error (end_tok, token::enumeration_end);
      }

    return retval;
  }

  octave_user_function*
  base_parser::start_classdef_external_method (tree_identifier *id,
                                               tree_parameter_list *pl)
  {
    octave_user_function* retval = nullptr;

    // External methods are only allowed within @-folders. In this case,
    // m_curr_class_name will be non-empty.

    if (! m_curr_class_name.empty ())
      {

        std::string mname = id->name ();

        // Methods that cannot be declared outside the classdef file:
        // - methods with '.' character (e.g. property accessors)
        // - class constructor
        // - `delete'

        if (mname.find_first_of (".") == std::string::npos
            && mname != "delete"
            && mname != m_curr_class_name)
          {
            // Create a dummy function that is used until the real method
            // is loaded.

            retval = new octave_user_function (symbol_scope (), pl);

            retval->stash_function_name (mname);

            int l = id->line ();
            int c = id->column ();

            retval->stash_fcn_location (l, c);
          }
        else
          bison_error ("invalid external method declaration, an external "
                       "method cannot be the class constructor, `delete' "
                       "or have a dot (.) character in its name");
      }
    else
      bison_error ("external methods are only allowed in @-folders");

    if (! retval)
      delete id;

    return retval;
  }

  tree_function_def *
  base_parser::finish_classdef_external_method (octave_user_function *fcn,
                                                tree_parameter_list *ret_list,
                                                comment_list *cl)
  {
    if (ret_list)
      fcn->define_ret_list (ret_list);

    if (cl)
      fcn->stash_leading_comment (cl);

    int l = fcn->beginning_line ();
    int c = fcn->beginning_column ();

    return new tree_function_def (fcn, l, c);
  }

  void
  base_parser::finish_classdef_file (tree_classdef *cls,
                                     tree_statement_list *local_fcns)
  {
    if (m_lexer.m_reading_classdef_file)
      m_classdef_object = cls;

    if (local_fcns)
      {
        symbol_table& symtab
          = __get_symbol_table__ ("base_parser::finish_classdef_file");

        for (tree_statement *elt : *local_fcns)
          {
            tree_command *cmd = elt->command ();

            tree_function_def *fcn_def
              = dynamic_cast<tree_function_def *> (cmd);

            octave_value ov_fcn = fcn_def->function ();
            octave_function *fcn = ov_fcn.function_value ();
            std::string nm = fcn->name ();
            std::string file = fcn->fcn_file_name ();

            symtab.install_local_function (nm, ov_fcn, file);
          }

        delete local_fcns;
      }
  }

  // Make an index expression.

  tree_index_expression *
  base_parser::make_index_expression (tree_expression *expr,
                                      tree_argument_list *args,
                                      char type)
  {
    tree_index_expression *retval = nullptr;

    if (args && args->has_magic_tilde ())
      {
        delete expr;
        delete args;

        bison_error ("invalid use of empty argument (~) in index expression");
      }
    else
      {
        int l = expr->line ();
        int c = expr->column ();

        if (! expr->is_postfix_indexed ())
          expr->set_postfix_index (type);

        if (expr->is_index_expression ())
          {
            tree_index_expression *tmp =
              static_cast<tree_index_expression *> (expr);

            tmp->append (args, type);

            retval = tmp;
          }
        else
          retval = new tree_index_expression (expr, args, l, c, type);
      }

    return retval;
  }

  // Make an indirect reference expression.

  tree_index_expression *
  base_parser::make_indirect_ref (tree_expression *expr,
                                  const std::string& elt)
  {
    tree_index_expression *retval = nullptr;

    int l = expr->line ();
    int c = expr->column ();

    if (! expr->is_postfix_indexed ())
      expr->set_postfix_index ('.');

    if (expr->is_index_expression ())
      {
        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);

        tmp->append (elt);

        retval = tmp;
      }
    else
      retval = new tree_index_expression (expr, elt, l, c);

    m_lexer.m_looking_at_indirect_ref = false;

    return retval;
  }

  // Make an indirect reference expression with dynamic field name.

  tree_index_expression *
  base_parser::make_indirect_ref (tree_expression *expr,
                                  tree_expression *elt)
  {
    tree_index_expression *retval = nullptr;

    int l = expr->line ();
    int c = expr->column ();

    if (! expr->is_postfix_indexed ())
      expr->set_postfix_index ('.');

    if (expr->is_index_expression ())
      {
        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);

        tmp->append (elt);

        retval = tmp;
      }
    else
      retval = new tree_index_expression (expr, elt, l, c);

    m_lexer.m_looking_at_indirect_ref = false;

    return retval;
  }

  // Make a declaration command.

  tree_decl_command *
  base_parser::make_decl_command (int tok, token *tok_val,
                                  tree_decl_init_list *lst)
  {
    tree_decl_command *retval = nullptr;

    int l = tok_val->line ();
    int c = tok_val->column ();

    if (lst)
      m_lexer.mark_as_variables (lst->variable_names ());

    switch (tok)
      {
      case GLOBAL:
        {
          retval = new tree_decl_command ("global", lst, l, c);
          retval->mark_global ();
        }
        break;

      case PERSISTENT:
        if (m_curr_fcn_depth > 0)
          {
            retval = new tree_decl_command ("persistent", lst, l, c);
            retval->mark_persistent ();
          }
        else
          {
            if (m_lexer.m_reading_script_file)
              warning ("ignoring persistent declaration near line %d of file '%s'",
                       l, m_lexer.m_fcn_file_full_name.c_str ());
            else
              warning ("ignoring persistent declaration near line %d", l);
          }
        break;

      default:
        panic_impossible ();
        break;
      }

    return retval;
  }

  bool
  base_parser::validate_param_list (tree_parameter_list *lst,
                                    tree_parameter_list::in_or_out type)
  {
    std::set<std::string> dict;

    for (tree_decl_elt *elt : *lst)
      {
        tree_identifier *id = elt->ident ();

        if (id)
          {
            std::string name = id->name ();

            if (id->is_black_hole ())
              {
                if (type != tree_parameter_list::in)
                  {
                    bison_error ("invalid use of ~ in output list");
                    return false;
                  }
              }
            else if (dict.find (name) != dict.end ())
              {
                bison_error ("'" + name
                             + "' appears more than once in parameter list");
                return false;
              }
            else
              dict.insert (name);
          }
      }

    std::string va_type = (type == tree_parameter_list::in
                           ? "varargin" : "varargout");

    size_t len = lst->length ();

    if (len > 0)
      {
        tree_decl_elt *elt = lst->back ();

        tree_identifier *id = elt->ident ();

        if (id && id->name () == va_type)
          {
            if (len == 1)
              lst->mark_varargs_only ();
            else
              lst->mark_varargs ();

            tree_parameter_list::iterator p = lst->end ();
            --p;
            delete *p;
            lst->erase (p);
          }
      }

    return true;
  }

  bool
  base_parser::validate_array_list (tree_expression *e)
  {
    bool retval = true;

    tree_array_list *al = dynamic_cast<tree_array_list *> (e);

    for (tree_argument_list* row : *al)
      {
        if (row && row->has_magic_tilde ())
          {
            retval = false;

            if (e->is_matrix ())
              bison_error ("invalid use of tilde (~) in matrix expression");
            else
              bison_error ("invalid use of tilde (~) in cell expression");

            break;
          }
      }

    return retval;
  }

  tree_argument_list *
  base_parser::validate_matrix_for_assignment (tree_expression *e)
  {
    tree_argument_list *retval = nullptr;

    if (e->is_constant ())
      {
        tree_evaluator& tw
          = __get_evaluator__ ("validate_matrix_for_assignment");

        octave_value ov = tw.evaluate (e);

        delete e;

        if (ov.isempty ())
          bison_error ("invalid empty left hand side of assignment");
        else
          bison_error ("invalid constant left hand side of assignment");
      }
    else
      {
        bool is_simple_assign = true;

        tree_argument_list *tmp = nullptr;

        if (e->is_matrix ())
          {
            tree_matrix *mat = dynamic_cast<tree_matrix *> (e);

            if (mat && mat->size () == 1)
              {
                tmp = mat->front ();
                mat->pop_front ();
                delete e;
                is_simple_assign = false;
              }
          }
        else
          tmp = new tree_argument_list (e);

        if (tmp && tmp->is_valid_lvalue_list ())
          {
            m_lexer.mark_as_variables (tmp->variable_names ());
            retval = tmp;
          }
        else
          {
            delete tmp;

            bison_error ("invalid left hand side of assignment");
          }

        if (retval && is_simple_assign)
          retval->mark_as_simple_assign_lhs ();
      }

    return retval;
  }

  // Finish building an array_list.

  tree_expression *
  base_parser::finish_array_list (tree_array_list *array_list)
  {
    tree_expression *retval = array_list;

    unwind_protect frame;

    frame.protect_var (discard_error_messages);
    frame.protect_var (discard_warning_messages);

    discard_error_messages = true;
    discard_warning_messages = true;

    if (array_list->all_elements_are_constant ())
      {
        try
          {
            tree_evaluator& tw
              = __get_evaluator__ ("finish_array_list");

            octave_value tmp = tw.evaluate (array_list);

            tree_constant *tc_retval
              = new tree_constant (tmp, array_list->line (),
                                   array_list->column ());

            std::ostringstream buf;

            tree_print_code tpc (buf);

            array_list->accept (tpc);

            tc_retval->stash_original_text (buf.str ());

            delete array_list;

            retval = tc_retval;
          }
        catch (const execution_exception&)
          {
            interpreter::recover_from_exception ();
          }
      }

    return retval;
  }

  // Finish building a matrix list.

  tree_expression *
  base_parser::finish_matrix (tree_matrix *m)
  {
    return (m
            ? finish_array_list (m)
            : new tree_constant (octave_null_matrix::instance));
  }

  // Finish building a cell list.

  tree_expression *
  base_parser::finish_cell (tree_cell *c)
  {
    return (c
            ? finish_array_list (c)
            : new tree_constant (octave_value (Cell ())));
  }

  void
  base_parser::maybe_warn_missing_semi (tree_statement_list *t)
  {
    if (m_curr_fcn_depth > 0)
      {
        tree_statement *tmp = t->back ();

        if (tmp->is_expression ())
          warning_with_id
            ("Octave:missing-semicolon",
             "missing semicolon near line %d, column %d in file '%s'",
             tmp->line (), tmp->column (), m_lexer.m_fcn_file_full_name.c_str ());
      }
  }

  tree_statement_list *
  base_parser::set_stmt_print_flag (tree_statement_list *list,
                                    char sep, bool warn_missing_semi)
  {
    tree_statement *tmp = list->back ();

    switch (sep)
      {
      case ';':
        tmp->set_print_flag (false);
        break;

      case 0:
      case ',':
      case '\n':
        tmp->set_print_flag (true);
        if (warn_missing_semi)
          maybe_warn_missing_semi (list);
        break;

      default:
        warning ("unrecognized separator type!");
        break;
      }

    // Even if a statement is null, we add it to the list then remove it
    // here so that the print flag is applied to the correct statement.

    if (tmp->is_null_statement ())
      {
        list->pop_back ();
        delete tmp;
      }

    return list;
  }

  // Finish building a statement.
  template <typename T>
  tree_statement *
  base_parser::make_statement (T *arg)
  {
    comment_list *comment = m_lexer.get_comment ();

    return new tree_statement (arg, comment);
  }

  tree_statement_list *
  base_parser::make_statement_list (tree_statement *stmt)
  {
    return new tree_statement_list (stmt);
  }

  tree_statement_list *
  base_parser::append_statement_list (tree_statement_list *list,
                                      char sep, tree_statement *stmt,
                                      bool warn_missing_semi)
  {
    set_stmt_print_flag (list, sep, warn_missing_semi);

    list->append (stmt);

    return list;
  }

  void
  base_parser::bison_error (const std::string& str, int l, int c)
  {
    int err_line = l < 0 ? m_lexer.m_input_line_number : l;
    int err_col = c < 0 ? m_lexer.m_current_input_column - 1 : c;

    std::ostringstream output_buf;

    if (m_lexer.m_reading_fcn_file || m_lexer.m_reading_script_file
        || m_lexer.m_reading_classdef_file)
      output_buf << "parse error near line " << err_line
                 << " of file " << m_lexer.m_fcn_file_full_name;
    else
      output_buf << "parse error:";

    if (str != "parse error")
      output_buf << "\n\n  " << str;

    output_buf << "\n\n";

    std::string curr_line = m_lexer.m_current_input_line;

    if (! curr_line.empty ())
      {
        size_t len = curr_line.length ();

        if (curr_line[len-1] == '\n')
          curr_line.resize (len-1);

        // Print the line, maybe with a pointer near the error token.

        output_buf << ">>> " << curr_line << "\n";

        if (err_col == 0)
          err_col = len;

        for (int i = 0; i < err_col + 3; i++)
          output_buf << " ";

        output_buf << "^";
      }

    output_buf << "\n";

    m_parse_error_msg = output_buf.str ();
  }

  int
  parser::run (void)
  {
    int status = -1;

    yypstate *pstate = static_cast<yypstate *> (m_parser_state);

    try
      {
        status = octave_pull_parse (pstate, *this);
      }
    catch (execution_exception& e)
      {
        std::string file = m_lexer.m_fcn_file_full_name;

        if (file.empty ())
          error (e, "parse error");
        else
          error (e, "parse error in %s", file.c_str ());
      }
    catch (const exit_exception&)
      {
        throw;
      }
    catch (interrupt_exception &)
      {
        throw;
      }
    catch (...)
      {
        std::string file = m_lexer.m_fcn_file_full_name;

        if (file.empty ())
          error ("unexpected exception while parsing input");
        else
          error ("unexpected exception while parsing %s", file.c_str ());
      }

    if (status != 0)
      parse_error ("%s", m_parse_error_msg.c_str ());

    return status;
  }

  // Parse input from INPUT.  Pass TRUE for EOF if the end of INPUT should
  // finish the parse.

  int
  push_parser::run (const std::string& input, bool eof)
  {
    int status = -1;

    dynamic_cast<push_lexer&> (m_lexer).append_input (input, eof);

    do
      {
        YYSTYPE lval;

        int token = octave_lex (&lval, m_lexer.m_scanner);

        if (token < 0)
          {
            if (! eof && m_lexer.at_end_of_buffer ())
              {
                status = -1;
                break;
              }
          }

        yypstate *pstate = static_cast<yypstate *> (m_parser_state);

        try
          {
            status = octave_push_parse (pstate, token, &lval, *this);
          }
        catch (execution_exception& e)
          {
            std::string file = m_lexer.m_fcn_file_full_name;

            if (file.empty ())
              error (e, "parse error");
            else
              error (e, "parse error in %s", file.c_str ());
          }
        catch (const exit_exception&)
          {
            throw;
          }
        catch (interrupt_exception &)
          {
            throw;
          }
        catch (...)
          {
            std::string file = m_lexer.m_fcn_file_full_name;

            if (file.empty ())
              error ("unexpected exception while parsing input");
            else
              error ("unexpected exception while parsing %s", file.c_str ());
          }
      }
    while (status == YYPUSH_MORE);

    if (status != 0)
      parse_error ("%s", m_parse_error_msg.c_str ());

    return status;
  }
}

static void
safe_fclose (FILE *f)
{
  if (f)
    fclose (static_cast<FILE *> (f));
}

static octave_value
parse_fcn_file (const std::string& full_file, const std::string& file,
                const std::string& dir_name, const std::string& dispatch_type,
                const std::string& package_name, bool require_file,
                bool force_script, bool autoload, bool relative_lookup,
                const std::string& warn_for)
{
  octave_value retval;

  octave::unwind_protect frame;

  octave_function *fcn_ptr = nullptr;

  // Open function file and parse.

  FILE *in_stream = octave::command_editor::get_input_stream ();

  frame.add_fcn (octave::command_editor::set_input_stream, in_stream);

  frame.add_fcn (octave::command_history::ignore_entries,
                 octave::command_history::ignoring_entries ());

  octave::command_history::ignore_entries ();

  FILE *ffile = nullptr;

  if (! full_file.empty ())
    ffile = std::fopen (full_file.c_str (), "rb");

  if (ffile)
    {
      frame.add_fcn (safe_fclose, ffile);

      octave::parser parser (ffile);

      parser.m_curr_class_name = dispatch_type;
      parser.m_curr_package_name = package_name;
      parser.m_autoloading = autoload;
      parser.m_fcn_file_from_relative_lookup = relative_lookup;

      parser.m_lexer.m_force_script = force_script;
      parser.m_lexer.prep_for_file ();
      parser.m_lexer.m_parsing_class_method = ! dispatch_type.empty ();

      parser.m_lexer.m_fcn_file_name = file;
      parser.m_lexer.m_fcn_file_full_name = full_file;
      parser.m_lexer.m_dir_name = dir_name;
      parser.m_lexer.m_package_name = package_name;

      int status = parser.run ();

      fcn_ptr = parser.m_primary_fcn_ptr;

      if (status == 0)
        {
          if (parser.m_lexer.m_reading_classdef_file
              && parser.m_classdef_object)
            {
              // Convert parse tree for classdef object to
              // meta.class info (and stash it in the symbol
              // table?).  Return pointer to constructor?

              if (fcn_ptr)
                panic_impossible ();

              bool is_at_folder = ! dispatch_type.empty ();

              octave::interpreter& interp
                = octave::__get_interpreter__ ("parse_fcn_file");

              try
                {
                  fcn_ptr = parser.m_classdef_object->make_meta_class (interp, is_at_folder);
                }
              catch (const octave::execution_exception&)
                {
                  delete parser.m_classdef_object;
                  throw;
                }

              if (fcn_ptr)
                retval = octave_value (fcn_ptr);

              delete parser.m_classdef_object;

              parser.m_classdef_object = nullptr;
            }
          else if (fcn_ptr)
            {
              retval = octave_value (fcn_ptr);

              fcn_ptr->maybe_relocate_end ();

              if (parser.m_parsing_subfunctions)
                {
                  if (! parser.m_endfunction_found)
                    parser.m_subfunction_names.reverse ();

                  fcn_ptr->stash_subfunction_names (parser.m_subfunction_names);
                }
            }
        }
      else
        error ("parse error while reading file %s", full_file.c_str ());
    }
  else if (require_file)
    error ("no such file, '%s'", full_file.c_str ());
  else if (! warn_for.empty ())
    error ("%s: unable to open file '%s'", warn_for.c_str (),
           full_file.c_str ());

  return retval;
}

namespace octave
{
  std::string
  get_help_from_file (const std::string& nm, bool& symbol_found,
                      std::string& full_file)
  {
    std::string retval;

    full_file = fcn_file_in_path (nm);

    std::string file = full_file;

    size_t file_len = file.length ();

    if ((file_len > 4 && file.substr (file_len-4) == ".oct")
        || (file_len > 4 && file.substr (file_len-4) == ".mex")
        || (file_len > 2 && file.substr (file_len-2) == ".m"))
      {
        file = sys::env::base_pathname (file);
        file = file.substr (0, file.find_last_of ('.'));

        size_t pos = file.find_last_of (sys::file_ops::dir_sep_str ());
        if (pos != std::string::npos)
          file = file.substr (pos+1);
      }

    if (! file.empty ())
      {
        symbol_found = true;

        octave_value ov_fcn
          = parse_fcn_file (full_file, file, "", "", "", true,
                            false, false, false, "");

        if (ov_fcn.is_defined ())
          {
            octave_function *fcn = ov_fcn.function_value ();

            if (fcn)
              retval = fcn->doc_string ();
          }
      }

    return retval;
  }

  std::string
  get_help_from_file (const std::string& nm, bool& symbol_found)
  {
    std::string file;
    return get_help_from_file (nm, symbol_found, file);
  }

  std::string
  lookup_autoload (const std::string& nm)
  {
    std::string retval;

    typedef std::map<std::string, std::string>::const_iterator am_iter;

    am_iter p = autoload_map.find (nm);

    if (p != autoload_map.end ())
      {
        load_path& lp = __get_load_path__ ("lookup_autoload");

        retval = lp.find_file (p->second);
      }

    return retval;
  }

  string_vector
  autoloaded_functions (void)
  {
    string_vector names (autoload_map.size ());

    octave_idx_type i = 0;
    for (const auto& fcn_fname : autoload_map)
      names[i++] = fcn_fname.first;

    return names;
  }

  string_vector
  reverse_lookup_autoload (const std::string& nm)
  {
    string_vector names;

    for (const auto& fcn_fname : autoload_map)
      if (nm == fcn_fname.second)
        names.append (fcn_fname.first);

    return names;
  }

  octave_value
  load_fcn_from_file (const std::string& file_name,
                      const std::string& dir_name,
                      const std::string& dispatch_type,
                      const std::string& package_name,
                      const std::string& fcn_name, bool autoload)
  {
    octave_value retval;

    unwind_protect frame;

    std::string nm = file_name;

    size_t nm_len = nm.length ();

    std::string file;

    bool relative_lookup = false;

    file = nm;

    if ((nm_len > 4 && nm.substr (nm_len-4) == ".oct")
        || (nm_len > 4 && nm.substr (nm_len-4) == ".mex")
        || (nm_len > 2 && nm.substr (nm_len-2) == ".m"))
      {
        nm = sys::env::base_pathname (file);
        nm = nm.substr (0, nm.find_last_of ('.'));

        size_t pos = nm.find_last_of (sys::file_ops::dir_sep_str ());
        if (pos != std::string::npos)
          nm = nm.substr (pos+1);
      }

    relative_lookup = ! sys::env::absolute_pathname (file);

    file = sys::env::make_absolute (file);

    int len = file.length ();

      dynamic_loader& dyn_loader
        = __get_dynamic_loader__ ("~octave_mex_function");

    if (len > 4 && file.substr (len-4, len-1) == ".oct")
      {
        if (autoload && ! fcn_name.empty ())
          nm = fcn_name;

        octave_function *tmpfcn
          = dyn_loader.load_oct (nm, file, relative_lookup);

        if (tmpfcn)
          {
            tmpfcn->stash_package_name (package_name);
            retval = octave_value (tmpfcn);
          }
      }
    else if (len > 4 && file.substr (len-4, len-1) == ".mex")
      {
        // Temporarily load m-file version of mex-file, if it exists,
        // to get the help-string to use.

        std::string doc_string;

        octave_value ov_fcn
          = parse_fcn_file (file.substr (0, len - 2), nm, dir_name,
                            dispatch_type, package_name, false,
                            autoload, autoload, relative_lookup, "");

        if (ov_fcn.is_defined ())
          {
            octave_function *tmpfcn = ov_fcn.function_value ();

            if (tmpfcn)
              doc_string = tmpfcn->doc_string ();
          }

        octave_function *tmpfcn
          = dyn_loader.load_mex (nm, file, relative_lookup);

        if (tmpfcn)
          {
            tmpfcn->document (doc_string);
            tmpfcn->stash_package_name (package_name);

            retval = octave_value (tmpfcn);
          }
      }
    else if (len > 2)
      {
        retval = parse_fcn_file (file, nm, dir_name, dispatch_type,
                                 package_name, true, autoload, autoload,
                                 relative_lookup, "");
      }

    return retval;
  }
}

DEFMETHOD (autoload, interp, args, ,
           doc: /* -*- texinfo -*-
@deftypefn  {} {@var{autoload_map} =} autoload ()
@deftypefnx {} {} autoload (@var{function}, @var{file})
@deftypefnx {} {} autoload (@dots{}, "remove")
Define @var{function} to autoload from @var{file}.

The second argument, @var{file}, should be an absolute filename or a file
name in the same directory as the function or script from which the autoload
command was run.  @var{file} @emph{should not} depend on the Octave load
path.

Normally, calls to @code{autoload} appear in PKG_ADD script files that are
evaluated when a directory is added to Octave's load path.  To avoid having
to hardcode directory names in @var{file}, if @var{file} is in the same
directory as the PKG_ADD script then

@example
autoload ("foo", "bar.oct");
@end example

@noindent
will load the function @code{foo} from the file @code{bar.oct}.  The above
usage when @code{bar.oct} is not in the same directory, or usages such as

@example
autoload ("foo", file_in_loadpath ("bar.oct"))
@end example

@noindent
are strongly discouraged, as their behavior may be unpredictable.

With no arguments, return a structure containing the current autoload map.

If a third argument @qcode{"remove"} is given, the function is cleared and
not loaded anymore during the current Octave session.

@seealso{PKG_ADD}
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin == 1 || nargin > 3)
    print_usage ();

  if (nargin == 0)
    {
      Cell func_names (dim_vector (autoload_map.size (), 1));
      Cell file_names (dim_vector (autoload_map.size (), 1));

      octave_idx_type i = 0;
      for (const auto& fcn_fname : autoload_map)
        {
          func_names(i) = fcn_fname.first;
          file_names(i) = fcn_fname.second;

          i++;
        }

      octave_map m;

      m.assign ("function", func_names);
      m.assign ("file", file_names);

      retval = m;
    }
  else
    {
      string_vector argv = args.make_argv ("autoload");

      std::string nm = argv[2];

      if (! octave::sys::env::absolute_pathname (nm))
        {
          octave::call_stack& cs = interp.get_call_stack ();

          octave_user_code *fcn = cs.caller_user_code ();

          bool found = false;

          if (fcn)
            {
              std::string fname = fcn->fcn_file_name ();

              if (! fname.empty ())
                {
                  fname = octave::sys::env::make_absolute (fname);
                  fname = fname.substr (0, fname.find_last_of (octave::sys::file_ops::dir_sep_str ()) + 1);

                  octave::sys::file_stat fs (fname + nm);

                  if (fs.exists ())
                    {
                      nm = fname + nm;
                      found = true;
                    }
                }
            }
          if (! found)
            warning_with_id ("Octave:autoload-relative-file-name",
                             "autoload: '%s' is not an absolute filename",
                             nm.c_str ());
        }
      if (nargin == 2)
        autoload_map[argv[1]] = nm;
      else if (nargin == 3)
        {
          if (argv[3] != "remove")
            error_with_id ("Octave:invalid-input-arg",
                           "autoload: third argument can only be 'remove'");

          // Remove function from symbol table and autoload map.
          octave::symbol_table& symtab = interp.get_symbol_table ();
          symtab.clear_dld_function (argv[1]);
          autoload_map.erase (argv[1]);
        }
    }

  return retval;
}

namespace octave
{
  // Execute the contents of a script file.  For compatibility with
  // Matlab, also execute a function file by calling the function it
  // defines with no arguments and nargout = 0.

  void
  source_file (const std::string& file_name, const std::string& context,
               bool verbose, bool require_file, const std::string& warn_for)
  {
    // Map from absolute name of script file to recursion level.  We
    // use a map instead of simply placing a limit on recursion in the
    // source_file function so that two mutually recursive scripts
    // written as
    //
    //   foo1.m:
    //   ------
    //   foo2
    //
    //   foo2.m:
    //   ------
    //   foo1
    //
    // and called with
    //
    //   foo1
    //
    // (for example) will behave the same if they are written as
    //
    //   foo1.m:
    //   ------
    //   source ("foo2.m")
    //
    //   foo2.m:
    //   ------
    //   source ("foo1.m")
    //
    // and called with
    //
    //   source ("foo1.m")
    //
    // (for example).

    static std::map<std::string, int> source_call_depth;

    std::string file_full_name
      = sys::file_ops::tilde_expand (file_name);

    size_t pos
      = file_full_name.find_last_of (sys::file_ops::dir_sep_str ());

    std::string dir_name = file_full_name.substr (0, pos);

    file_full_name = sys::env::make_absolute (file_full_name);

    unwind_protect frame;

    if (source_call_depth.find (file_full_name) == source_call_depth.end ())
      source_call_depth[file_full_name] = -1;

    frame.protect_var (source_call_depth[file_full_name]);

    source_call_depth[file_full_name]++;

    tree_evaluator& tw = __get_evaluator__ ("source_file");

    if (source_call_depth[file_full_name] >= tw.max_recursion_depth ())
      error ("max_recursion_depth exceeded");

    if (! context.empty ())
      {
        call_stack& cs = __get_call_stack__ ("source_file");

        if (context == "caller")
          cs.goto_caller_frame ();
        else if (context == "base")
          cs.goto_base_frame ();
        else
          error ("source: context must be \"caller\" or \"base\"");

        frame.add_method (cs, &call_stack::pop);
      }

    // Find symbol name that would be in symbol_table, if it were loaded.
    size_t dir_end
      = file_name.find_last_of (sys::file_ops::dir_sep_chars ());
    dir_end = (dir_end == std::string::npos) ? 0 : dir_end + 1;

    size_t extension = file_name.find_last_of ('.');
    if (extension == std::string::npos)
      extension = file_name.length ();

    std::string symbol = file_name.substr (dir_end, extension - dir_end);
    std::string full_name = sys::canonicalize_file_name (file_name);

    // Check if this file is already loaded (or in the path)
    symbol_table& symtab = __get_symbol_table__ ("source_file");
    octave_value ov_code = symtab.find (symbol);

    // For compatibility with Matlab, accept both scripts and
    // functions.

    if (ov_code.is_user_code ())
      {
        octave_user_code *code = ov_code.user_code_value ();

        if (! code
            || (sys::canonicalize_file_name (code->fcn_file_name ())
                != full_name))
          {
            // Wrong file, so load it below.
            ov_code = octave_value ();
          }
      }
    else
      {
        // Not a script, so load it below.
        ov_code = octave_value ();
      }

    // If no symbol of this name, or the symbol is for a different
    // file, load.

    if (ov_code.is_undefined ())
      {
        try
          {
            ov_code = parse_fcn_file (file_full_name, file_name, dir_name,
                                      "", "", require_file, true, false,
                                      false, warn_for);
          }
        catch (execution_exception& e)
          {
            error (e, "source: error sourcing file '%s'",
                   file_full_name.c_str ());
          }
      }

    // Return or error if we don't have a valid script or function.

    if (ov_code.is_undefined ())
      return;

    if (! ov_code.is_user_code ())
      error ("source: %s is not a script", full_name.c_str ());

    if (verbose)
      {
        std::cout << "executing commands from " << full_name << " ... ";
        std::cout.flush ();
      }

    octave_user_code *code = ov_code.user_code_value ();

    code->call (tw, 0, octave_value_list ());

    if (verbose)
      std::cout << "done." << std::endl;
  }
}

DEFMETHOD (mfilename, interp, args, ,
           doc: /* -*- texinfo -*-
@deftypefn  {} {} mfilename ()
@deftypefnx {} {} mfilename ("fullpath")
@deftypefnx {} {} mfilename ("fullpathext")
Return the name of the currently executing file.

When called from outside an m-file return the empty string.

Given the argument @qcode{"fullpath"}, include the directory part of the
filename, but not the extension.

Given the argument @qcode{"fullpathext"}, include the directory part of
the filename and the extension.
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin > 1)
    print_usage ();

  std::string arg;

  if (nargin == 1)
    arg = args(0).xstring_value ("mfilename: argument must be a string");

  std::string fname;

  octave::call_stack& cs = interp.get_call_stack ();

  octave_user_code *fcn = cs.caller_user_code ();

  if (fcn)
    {
      fname = fcn->fcn_file_name ();

      if (fname.empty ())
        fname = fcn->name ();
    }

  if (arg == "fullpathext")
    retval = fname;
  else
    {
      size_t dpos = fname.rfind (octave::sys::file_ops::dir_sep_char ());
      size_t epos = fname.rfind ('.');

      if (epos <= dpos)
        epos = std::string::npos;

      fname = (epos != std::string::npos) ? fname.substr (0, epos) : fname;

      if (arg == "fullpath")
        retval = fname;
      else
        retval = (dpos != std::string::npos) ? fname.substr (dpos+1) : fname;
    }

  return retval;
}

DEFUN (source, args, ,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} source (@var{file})
@deftypefnx {} {} source (@var{file}, @var{context})
Parse and execute the contents of @var{file}.

Without specifying @var{context}, this is equivalent to executing commands
from a script file, but without requiring the file to be named
@file{@var{file}.m} or to be on the execution path.

Instead of the current context, the script may be executed in either the
context of the function that called the present function
(@qcode{"caller"}), or the top-level context (@qcode{"base"}).
@seealso{run}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin < 1 || nargin > 2)
    print_usage ();

  std::string file_name = args(0).xstring_value ("source: FILE must be a string");

  std::string context;

  if (nargin == 2)
    context = args(1).xstring_value ("source: CONTEXT must be a string");

  octave::source_file (file_name, context);

  return retval;
}

namespace octave
{
  //! Evaluate an Octave function (built-in or interpreted) and return
  //! the list of result values.
  //!
  //! @param name The name of the function to call.
  //! @param args The arguments to the function.
  //! @param nargout The number of output arguments expected.
  //! @return A list of output values.  The length of the list is not
  //!         necessarily the same as @c nargout.

  octave_value_list
  feval (const std::string& name, const octave_value_list& args, int nargout)
  {
    octave_value_list retval;

    symbol_table& symtab = __get_symbol_table__ ("feval");

    octave_value fcn = symtab.find_function (name, args);

    if (fcn.is_defined ())
      {
        tree_evaluator& tw = __get_evaluator__ ("feval");

        octave_function *of = fcn.function_value ();

        retval = of->call (tw, nargout, args);
      }
    else
      error ("feval: function '%s' not found", name.c_str ());

    return retval;
  }

  octave_value_list
  feval (octave_function *fcn, const octave_value_list& args, int nargout)
  {
    octave_value_list retval;

    if (fcn)
      {
        tree_evaluator& tw = __get_evaluator__ ("feval");

        retval = fcn->call (tw, nargout, args);
      }

    return retval;
  }

  octave_value_list
  feval (octave_value& val, const octave_value_list& args, int nargout)
  {
    if (val.is_function ())
      {
        return feval (val.function_value (), args, nargout);
      }
    else if (val.is_function_handle ())
      {
        // This covers function handles, inline functions, and anonymous
        //  functions.

        std::list<octave_value_list> arg_list;
        arg_list.push_back (args);

        return val.subsref ("(", arg_list, nargout);
      }
    else if (val.is_string ())
      {
        return feval (val.string_value (), args, nargout);
      }
    else
      error ("feval: first argument must be a string, inline function, or a function handle");

    return ovl ();
  }
}

static octave_value_list
get_feval_args (const octave_value_list& args)
{
  return args.slice (1, args.length () - 1, true);
}

namespace octave
{
  //! Evaluate an Octave function (built-in or interpreted) and return
  //! the list of result values.
  //!
  //! @param args The first element of @c args is the function to call.
  //!             It may be the name of the function as a string, a function
  //!             handle, or an inline function.  The remaining arguments are
  //!             passed to the function.
  //! @param nargout The number of output arguments expected.
  //! @return A list of output values.  The length of the list is not
  //!         necessarily the same as @c nargout.

  octave_value_list
  feval (const octave_value_list& args, int nargout)
  {
    if (args.length () > 0)
      {
        octave_value f_arg = args(0);

        octave_value_list tmp_args = get_feval_args (args);

        return feval (f_arg, tmp_args, nargout);
      }
    else
      error ("feval: first argument must be a string, inline function, or a function handle");

    return ovl ();
  }
}

DEFUN (feval, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn {} {} feval (@var{name}, @dots{})
Evaluate the function named @var{name}.

Any arguments after the first are passed as inputs to the named function.
For example,

@example
@group
feval ("acos", -1)
     @result{} 3.1416
@end group
@end example

@noindent
calls the function @code{acos} with the argument @samp{-1}.

The function @code{feval} can also be used with function handles of any sort
(@pxref{Function Handles}).  Historically, @code{feval} was the only way to
call user-supplied functions in strings, but function handles are now
preferred due to the cleaner syntax they offer.  For example,

@example
@group
@var{f} = @@exp;
feval (@var{f}, 1)
    @result{} 2.7183
@var{f} (1)
    @result{} 2.7183
@end group
@end example

@noindent
are equivalent ways to call the function referred to by @var{f}.  If it
cannot be predicted beforehand whether @var{f} is a function handle,
function name in a string, or inline function then @code{feval} can be used
instead.
@end deftypefn */)
{
  if (args.length () == 0)
    print_usage ();

  return octave::feval (args, nargout);
}

DEFMETHOD (builtin, interp, args, nargout,
           doc: /* -*- texinfo -*-
@deftypefn {} {[@dots{}] =} builtin (@var{f}, @dots{})
Call the base function @var{f} even if @var{f} is overloaded to another
function for the given type signature.

This is normally useful when doing object-oriented programming and there is
a requirement to call one of Octave's base functions rather than the
overloaded one of a new class.

A trivial example which redefines the @code{sin} function to be the
@code{cos} function shows how @code{builtin} works.

@example
@group
sin (0)
  @result{} 0
function y = sin (x), y = cos (x); endfunction
sin (0)
  @result{} 1
builtin ("sin", 0)
  @result{} 0
@end group
@end example
@end deftypefn */)
{
  octave_value_list retval;

  if (args.length () == 0)
    print_usage ();

  const std::string name (args(0).xstring_value ("builtin: function name (F) must be a string"));

  octave::symbol_table& symtab = interp.get_symbol_table ();

  octave_value fcn = symtab.builtin_find (name);

  if (fcn.is_defined ())
    retval = octave::feval (fcn.function_value (), args.splice (0, 1), nargout);
  else
    error ("builtin: lookup for symbol '%s' failed", name.c_str ());

  return retval;
}

namespace octave
{
  octave_value_list
  eval_string (const std::string& eval_str, bool silent,
               int& parse_status, int nargout)
  {
    octave_value_list retval;

    parser parser (eval_str);

    do
      {
        parser.reset ();

        parse_status = parser.run ();

        if (parse_status == 0)
          {
            if (parser.m_stmt_list)
              {
                tree_statement *stmt = nullptr;

                tree_evaluator& tw = __get_evaluator__ ("eval_string");

                if (parser.m_stmt_list->length () == 1
                    && (stmt = parser.m_stmt_list->front ())
                    && stmt->is_expression ())
                  {
                    tree_expression *expr = stmt->expression ();

                    if (silent)
                      expr->set_print_flag (false);

                    bool do_bind_ans = false;

                    if (expr->is_identifier ())
                      {
                        octave::symbol_scope scope = tw.get_current_scope ();

                        octave::symbol_record::context_id context
                          = scope.current_context ();

                        tree_identifier *id
                          = dynamic_cast<tree_identifier *> (expr);

                        do_bind_ans = (! id->is_variable (context));
                      }
                    else
                      do_bind_ans = (! expr->is_assignment_expression ());

                    retval = tw.evaluate_n (expr, nargout);

                    if (do_bind_ans && ! retval.empty ())
                      tw.bind_ans (retval(0), expr->print_result ());

                    if (nargout == 0)
                      retval = octave_value_list ();
                  }
                else if (nargout == 0)
                  parser.m_stmt_list->accept (tw);
                else
                  error ("eval: invalid use of statement list");

                if (tree_return_command::returning
                    || tree_break_command::breaking
                    || tree_continue_command::continuing)
                  break;
              }
            else if (parser.m_lexer.m_end_of_input)
              break;
          }
      }
    while (parse_status == 0);

    return retval;
  }

  octave_value
  eval_string (const std::string& eval_str, bool silent, int& parse_status)
  {
    octave_value retval;

    octave_value_list tmp = eval_string (eval_str, silent, parse_status, 1);

    if (! tmp.empty ())
      retval = tmp(0);

    return retval;
  }

  static octave_value_list
  eval_string (const octave_value& arg, bool silent, int& parse_status,
               int nargout)
  {
    std::string s = arg.xstring_value ("eval: expecting std::string argument");

    return eval_string (s, silent, parse_status, nargout);
  }

  void
  cleanup_statement_list (tree_statement_list **lst)
  {
    if (*lst)
      {
        delete *lst;
        *lst = nullptr;
      }
  }
}

DEFUN (eval, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} eval (@var{try})
@deftypefnx {} {} eval (@var{try}, @var{catch})
Parse the string @var{try} and evaluate it as if it were an Octave
program.

If execution fails, evaluate the optional string @var{catch}.

The string @var{try} is evaluated in the current context, so any results
remain available after @code{eval} returns.

The following example creates the variable @var{A} with the approximate
value of 3.1416 in the current workspace.

@example
eval ("A = acos(-1);");
@end example

If an error occurs during the evaluation of @var{try} then the @var{catch}
string is evaluated, as the following example shows:

@example
@group
eval ('error ("This is a bad example");',
      'printf ("This error occurred:\n%s\n", lasterr ());');
     @print{} This error occurred:
        This is a bad example
@end group
@end example

Programming Note: if you are only using @code{eval} as an error-capturing
mechanism, rather than for the execution of arbitrary code strings,
Consider using try/catch blocks or unwind_protect/unwind_protect_cleanup
blocks instead.  These techniques have higher performance and don't
introduce the security considerations that the evaluation of arbitrary code
does.
@seealso{evalin, evalc, assignin, feval}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin == 0)
    print_usage ();

  octave::unwind_protect frame;

  if (nargin > 1)
    {
      frame.protect_var (buffer_error_messages);
      buffer_error_messages++;
    }

  int parse_status = 0;

  bool execution_error = false;

  octave_value_list tmp;

  try
    {
      tmp = octave::eval_string (args(0), nargout > 0, parse_status, nargout);
    }
  catch (const octave::execution_exception&)
    {
      octave::interpreter::recover_from_exception ();

      execution_error = true;
    }

  if (nargin > 1 && (parse_status != 0 || execution_error))
    {
      // Set up for letting the user print any messages from
      // errors that occurred in the first part of this eval().

      buffer_error_messages--;

      tmp = octave::eval_string (args(1), nargout > 0, parse_status, nargout);

      if (nargout > 0)
        retval = tmp;
    }
  else
    {
      if (nargout > 0)
        retval = tmp;

      // FIXME: we should really be rethrowing whatever exception occurred,
      // not just throwing an execution exception.
      if (execution_error)
        octave_throw_execution_exception ();
    }

  return retval;
}

/*

%!shared x
%! x = 1;

%!assert (eval ("x"), 1)
%!assert (eval ("x;"))
%!assert (eval ("x;"), 1)

%!test
%! y = eval ("x");
%! assert (y, 1);

%!test
%! y = eval ("x;");
%! assert (y, 1);

%!test
%! eval ("x = 1;");
%! assert (x,1);

%!test
%! eval ("flipud = 2;");
%! assert (flipud, 2);

%!function y = __f ()
%!  eval ("flipud = 2;");
%!  y = flipud;
%!endfunction
%!assert (__f(), 2)

% bug #35645
%!test
%! [a,] = gcd (1,2);
%! [a,b,] = gcd (1, 2);

%!error eval ("switch = 13;")

*/

DEFMETHOD (assignin, interp, args, ,
           doc: /* -*- texinfo -*-
@deftypefn {} {} assignin (@var{context}, @var{varname}, @var{value})
Assign @var{value} to @var{varname} in context @var{context}, which
may be either @qcode{"base"} or @qcode{"caller"}.
@seealso{evalin}
@end deftypefn */)
{
  octave_value_list retval;

  if (args.length () != 3)
    print_usage ();

  std::string context = args(0).xstring_value ("assignin: CONTEXT must be a string");

  octave::unwind_protect frame;

  octave::call_stack& cs = interp.get_call_stack ();

  if (context == "caller")
    cs.goto_caller_frame ();
  else if (context == "base")
    cs.goto_base_frame ();
  else
    error ("assignin: CONTEXT must be \"caller\" or \"base\"");

  frame.add_method (cs, &octave::call_stack::pop);

  std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");

  if (valid_identifier (nm))
    {
      // Put the check here so that we don't slow down assignments
      // generally.  Any that go through Octave's parser should have
      // already been checked.

      if (octave::is_keyword (nm))
        error ("assignin: invalid assignment to keyword '%s'", nm.c_str ());

      octave::symbol_scope scope = interp.get_current_scope ();

      if (scope)
        scope.assign (nm, args(2));
    }
  else
    error ("assignin: invalid variable name in argument VARNAME");

  return retval;
}

/*

%!error assignin ("base", "switch", "13")

*/

DEFMETHOD (evalin, interp, args, nargout,
           doc: /* -*- texinfo -*-
@deftypefn  {} {} evalin (@var{context}, @var{try})
@deftypefnx {} {} evalin (@var{context}, @var{try}, @var{catch})
Like @code{eval}, except that the expressions are evaluated in the context
@var{context}, which may be either @qcode{"caller"} or @qcode{"base"}.
@seealso{eval, assignin}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin < 2)
    print_usage ();

  std::string context = args(0).xstring_value ("evalin: CONTEXT must be a string");

  octave::unwind_protect frame;

  octave::call_stack& cs = interp.get_call_stack ();

  if (context == "caller")
    cs.goto_caller_frame ();
  else if (context == "base")
    cs.goto_base_frame ();
  else
    error ("evalin: CONTEXT must be \"caller\" or \"base\"");

  frame.add_method (cs, &octave::call_stack::pop);

  if (nargin > 2)
    {
      frame.protect_var (buffer_error_messages);
      buffer_error_messages++;
    }

  int parse_status = 0;

  bool execution_error = false;

  octave_value_list tmp;

  try
    {
      tmp = octave::eval_string (args(1), nargout > 0,
                                 parse_status, nargout);
    }
  catch (const octave::execution_exception&)
    {
      octave::interpreter::recover_from_exception ();

      execution_error = true;
    }

  if (nargin > 2 && (parse_status != 0 || execution_error))
    {
      // Set up for letting the user print any messages from
      // errors that occurred in the first part of this eval().

      buffer_error_messages--;

      tmp = octave::eval_string (args(2), nargout > 0,
                                 parse_status, nargout);

      retval = (nargout > 0) ? tmp : octave_value_list ();
    }
  else
    {
      if (nargout > 0)
        retval = tmp;

      // FIXME: we should really be rethrowing whatever
      // exception occurred, not just throwing an
      // execution exception.
      if (execution_error)
        octave_throw_execution_exception ();
    }

  return retval;
}

static void
maybe_print_last_error_message (bool *doit)
{
  if (doit && *doit)
    // Print error message again, which was lost because of the stderr buffer
    // Note: this keeps error_state and last_error_stack intact
    message_with_id ("error", last_error_id ().c_str (),
                     last_error_message ().c_str ());
}

static void
restore_octave_stdout (std::streambuf *buf)
{
  octave_stdout.flush ();
  octave_stdout.rdbuf (buf);
}

static void
restore_octave_stderr (std::streambuf *buf)
{
  std::cerr.flush ();
  std::cerr.rdbuf (buf);
}

DEFUN (evalc, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {@var{s} =} evalc (@var{try})
@deftypefnx {} {@var{s} =} evalc (@var{try}, @var{catch})
Parse and evaluate the string @var{try} as if it were an Octave program,
while capturing the output into the return variable @var{s}.

If execution fails, evaluate the optional string @var{catch}.

This function behaves like @code{eval}, but any output or warning messages
which would normally be written to the console are captured and returned in
the string @var{s}.

The @code{diary} is disabled during the execution of this function.  When
@code{system} is used, any output produced by external programs is
@emph{not} captured, unless their output is captured by the @code{system}
function itself.

@example
@group
s = evalc ("t = 42"), t
  @result{} s = t =  42

  @result{} t =  42
@end group
@end example
@seealso{eval, diary}
@end deftypefn */)
{
  int nargin = args.length ();

  if (nargin == 0 || nargin > 2)
    print_usage ();

  // redirect stdout/stderr to capturing buffer
  std::ostringstream buffer;

  std::ostream& out_stream = octave_stdout;
  std::ostream& err_stream = std::cerr;

  out_stream.flush ();
  err_stream.flush ();

  std::streambuf* old_out_buf = out_stream.rdbuf (buffer.rdbuf ());
  std::streambuf* old_err_buf = err_stream.rdbuf (buffer.rdbuf ());

  bool eval_error_occurred = true;

  octave::unwind_protect frame;

  frame.add_fcn (maybe_print_last_error_message, &eval_error_occurred);
  frame.add_fcn (restore_octave_stdout, old_out_buf);
  frame.add_fcn (restore_octave_stderr, old_err_buf);

  // call standard eval function
  octave_value_list retval;
  int eval_nargout = std::max (0, nargout - 1);

  retval = Feval (args, eval_nargout);
  eval_error_occurred = false;

  retval.prepend (buffer.str ());
  return retval;
}

/*

%!assert (evalc ("1"), "ans =  1\n")
%!assert (evalc ("1;"), "")

%!test
%! [s, y] = evalc ("1");
%! assert (s, "");
%! assert (y, 1);

%!test
%! [s, y] = evalc ("1;");
%! assert (s, "");
%! assert (y, 1);

%!test
%! assert (evalc ("y = 2"), "y =  2\n");
%! assert (y, 2);

%!test
%! assert (evalc ("y = 3;"), "");
%! assert (y, 3);

%!test
%! [s, a, b] = evalc ("deal (1, 2)");
%! assert (s, "");
%! assert (a, 1);
%! assert (b, 2);

%!function [a, b] = __f_evalc ()
%!  printf ("foo");
%!  fprintf (stdout, "bar");
%!  disp (pi);
%!  a = 1;
%!  b = 2;
%!endfunction
%!test
%! [s, a, b] = evalc ("__f_evalc ()");
%! assert (s, "foobar 3.1416\n");
%! assert (a, 1);
%! assert (b, 2);

%!error <foo> (evalc ("error ('foo')"))
%!error <bar> (evalc ("error ('foo')", "error ('bar')"))

%!test
%! warning ("off", "quiet", "local");
%! assert (evalc ("warning ('foo')"), "warning: foo\n");

%!test
%! warning ("off", "quiet", "local");
%! assert (evalc ("error ('foo')", "warning ('bar')"), "warning: bar\n");

%!error evalc ("switch = 13;")

*/

DEFUN (__parser_debug_flag__, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {@var{val} =} __parser_debug_flag__ ()
@deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})
Query or set the internal flag that determines whether Octave's parser
prints debug information as it processes an expression.
@seealso{__lexer_debug_flag__}
@end deftypefn */)
{
  octave_value retval;

  bool debug_flag = octave_debug;

  retval = set_internal_variable (debug_flag, args, nargout,
                                  "__parser_debug_flag__");

  octave_debug = debug_flag;

  return retval;
}

DEFUN (__parse_file__, args, ,
       doc: /* -*- texinfo -*-
@deftypefn {} {} __parse_file__ (@var{file}, @var{verbose})
Undocumented internal function.
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin < 1 || nargin > 2)
    print_usage ();

  std::string file = args(0).xstring_value ("__parse_file__: expecting filename as argument");

  std::string full_file
      = octave::sys::file_ops::tilde_expand (file);

  full_file = octave::sys::env::make_absolute (full_file);

  std::string dir_name;

  size_t file_len = file.length ();

  if ((file_len > 4 && file.substr (file_len-4) == ".oct")
      || (file_len > 4 && file.substr (file_len-4) == ".mex")
      || (file_len > 2 && file.substr (file_len-2) == ".m"))
    {
      file = octave::sys::env::base_pathname (file);
      file = file.substr (0, file.find_last_of ('.'));

      size_t pos = file.find_last_of (octave::sys::file_ops::dir_sep_str ());
      if (pos != std::string::npos)
        {
          dir_name = file.substr (0, pos);
          file = file.substr (pos+1);
        }
    }

  if (nargin == 2)
    octave_stdout << "parsing " << full_file << std::endl;

  octave_value ov_fcn
    = parse_fcn_file (full_file, file, dir_name, "", "", true, false,
                      false, false, "__parse_file__");

  return retval;
}
