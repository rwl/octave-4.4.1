@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2018 Pantxo Diribarne
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@table @asis

@anchor{XREFtextbackgroundcolor}
@prindex text backgroundcolor
@item @code{backgroundcolor}: colorspec, def. @qcode{"none"}
Color of the background area.  @xref{Colors, , colorspec}.


@anchor{XREFtextbeingdeleted}
@prindex text beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFtextbusyaction}
@prindex text busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}
Define how Octave handles the execution of this object's callback properties when it is unable to interrupt another object's executing callback.  This is only relevant when the currently executing callback object has its @code{interruptible} property set to @qcode{"off"}.  The @code{busyaction} property of the interrupting callback object indicates whether the interrupting callback is queued (@qcode{"queue"} (default)) or discarded (@qcode{"cancel"}).
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFtextbuttondownfcn}
@prindex text buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}
For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFtextchildren}
@prindex text children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
@code{children} is unused.


@anchor{XREFtextclipping}
@prindex text clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the text is clipped in its parent axes limits.


@anchor{XREFtextcolor}
@prindex text color
@item @code{color}: colorspec, def. @code{[0   0   0]}
Color of the text.  @xref{Colors, ,colorspec}.


@anchor{XREFtextcreatefcn}
@prindex text createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after text has been created.  Function is set by using default property on root object, e.g., @code{set (groot, "defaulttextcreatefcn", 'disp ("text created!")')}.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFtextdeletefcn}
@prindex text deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before text is deleted.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFtextedgecolor}
@prindex text edgecolor
@item @code{edgecolor}: colorspec, def. @qcode{"none"}
Color of the outline of the background area.  @xref{Colors, , colorspec}.


@anchor{XREFtextediting}
@prindex text editing
@item @code{editing}: @{@qcode{"off"}@} | @qcode{"on"}
@code{editing} is unused.


@anchor{XREFtextextent}
@prindex text extent
@item @code{extent} (read-only): four-element vector, def. @code{[0   0   0   0]}
Vector @code{[x0 y0 width height]} indicating the size and location of the text string.


@anchor{XREFtextfontangle}
@prindex text fontangle
@item @code{fontangle}: @qcode{"italic"} | @{@qcode{"normal"}@} | @qcode{"oblique"}
Control whether the font is italic or normal.


@anchor{XREFtextfontname}
@prindex text fontname
@item @code{fontname}: string, def. @qcode{"*"}
Name of font used for text rendering.  When setting this property, the text rendering engine will search for a matching font in your system.  If none is found then text is rendered using a default sans serif font (same as the default @qcode{"*"} value).


@anchor{XREFtextfontsize}
@prindex text fontsize
@item @code{fontsize}: scalar, def. @code{10}
Size of the font used for text rendering.  @xref{XREFtextfontunits, , fontunits property}.


@anchor{XREFtextfontunits}
@prindex text fontunits
@item @code{fontunits}: @qcode{"centimeters"} | @qcode{"inches"} | @qcode{"normalized"} | @qcode{"pixels"} | @{@qcode{"points"}@}
Units used to interpret the @qcode{"fontsize"} property.


@anchor{XREFtextfontweight}
@prindex text fontweight
@item @code{fontweight}: @qcode{"bold"} | @qcode{"demi"} | @qcode{"light"} | @{@qcode{"normal"}@}
Control the variant of the base font used for text rendering.


@anchor{XREFtexthandlevisibility}
@prindex text handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the text's handle is not visible in its parent's "children" property.


@anchor{XREFtexthittest}
@prindex text hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether text processes mouse events or passes them to ancestors of the object.  When enabled, the object may respond to mouse clicks by evaluating the @qcode{"buttondownfcn"}, showing the uicontextmenu, and eventually becoming the root @qcode{"currentobject"}.  This property is only relevant when the object can accept mouse clicks which is determined by the @qcode{"pickableparts"} property.  @xref{XREFtextpickableparts, , @w{pickableparts property}}.


@anchor{XREFtexthorizontalalignment}
@prindex text horizontalalignment
@item @code{horizontalalignment}: @qcode{"center"} | @{@qcode{"left"}@} | @qcode{"right"}



@anchor{XREFtextinterpreter}
@prindex text interpreter
@item @code{interpreter}: @qcode{"latex"} | @qcode{"none"} | @{@qcode{"tex"}@}
Control the way the @qcode{"string"} property is interpreted.
@xref{XREFinterpreterusage, , @w{Use of the interpreter property}}.


@anchor{XREFtextinterruptible}
@prindex text interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether this object's callback functions may be interrupted by other callbacks.  By default @code{interruptible} is @qcode{"on"} and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, @code{getframe} or @code{pause} functions are eventually interrupted.
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFtextlinestyle}
@prindex text linestyle
@item @code{linestyle}: @{@qcode{"-"}@} | @qcode{"--"} | @qcode{"-."} | @qcode{":"} | @qcode{"none"}
Style of the outline.  @xref{Line Styles}.


@anchor{XREFtextlinewidth}
@prindex text linewidth
@item @code{linewidth}: scalar, def. @code{0.50000}
Width of the outline.


@anchor{XREFtextmargin}
@prindex text margin
@item @code{margin}: scalar, def. @code{2}
Margins between the borders of the background area and the texts.  The value is currently interpreted as pixels, regardless of the @qcode{"fontunits"} property.


@anchor{XREFtextparent}
@prindex text parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.


@anchor{XREFtextpickableparts}
@prindex text pickableparts
@item @code{pickableparts}: @qcode{"all"} | @qcode{"none"} | @{@qcode{"visible"}@}
Specify whether text will accept mouse clicks.  By default, @code{pickableparts} is @qcode{"visible"} and only visible parts of the text or its children may react to mouse clicks.  When @code{pickableparts} is @qcode{"all"} both visible and invisible parts (or children) may react to mouse clicks.  When @code{pickableparts} is @qcode{"none"} mouse clicks on the object are ignored and transmitted to any objects underneath this one.  When an object is configured to accept mouse clicks the @qcode{"hittest"} property will determine how they are processed.  @xref{XREFtexthittest, , @w{hittest property}}.


@anchor{XREFtextposition}
@prindex text position
@item @code{position}: four-element vector, def. @code{[0   0   0]}
Vector @code{[X0 Y0 Z0]} where X0, Y0 and Z0 indicate the position of the text anchor as defined by @code{verticalalignment} and @code{horizontalalignment}.


@anchor{XREFtextrotation}
@prindex text rotation
@item @code{rotation}: scalar, def. @code{0}
The angle of rotation for the displayed text, measured in degrees.


@anchor{XREFtextselected}
@prindex text selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFtextselectionhighlight}
@prindex text selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFtextstring}
@prindex text string
@item @code{string}: string, def. @qcode{""}
The text object string content.


@anchor{XREFtexttag}
@prindex text tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFtexttype}
@prindex text type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"text"}


@anchor{XREFtextuicontextmenu}
@prindex text uicontextmenu
@item @code{uicontextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this text object.


@anchor{XREFtextunits}
@prindex text units
@item @code{units}: @qcode{"centimeters"} | @{@qcode{"data"}@} | @qcode{"inches"} | @qcode{"normalized"} | @qcode{"pixels"} | @qcode{"points"}



@anchor{XREFtextuserdata}
@prindex text userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.


@anchor{XREFtextverticalalignment}
@prindex text verticalalignment
@item @code{verticalalignment}: @qcode{"baseline"} | @qcode{"bottom"} | @qcode{"cap"} | @{@qcode{"middle"}@} | @qcode{"top"}



@anchor{XREFtextvisible}
@prindex text visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the text is not rendered on screen.

@end table