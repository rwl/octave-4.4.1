@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2018 Pantxo Diribarne
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@table @asis

@anchor{XREFimagealphadata}
@prindex image alphadata
@item @code{alphadata}: scalar | matrix, def. @code{1}
Transparency is not yet implemented for image objects.  @code{alphadata} is unused.


@anchor{XREFimagealphadatamapping}
@prindex image alphadatamapping
@item @code{alphadatamapping}: @qcode{"direct"} | @{@qcode{"none"}@} | @qcode{"scaled"}
Transparency is not yet implemented for image objects.  @code{alphadatamapping} is unused.


@anchor{XREFimagebeingdeleted}
@prindex image beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFimagebusyaction}
@prindex image busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}
Define how Octave handles the execution of this object's callback properties when it is unable to interrupt another object's executing callback.  This is only relevant when the currently executing callback object has its @code{interruptible} property set to @qcode{"off"}.  The @code{busyaction} property of the interrupting callback object indicates whether the interrupting callback is queued (@qcode{"queue"} (default)) or discarded (@qcode{"cancel"}).
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFimagebuttondownfcn}
@prindex image buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}
For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFimagecdata}
@prindex image cdata
@item @code{cdata}: matrix, def. 64-by-64 double



@anchor{XREFimagecdatamapping}
@prindex image cdatamapping
@item @code{cdatamapping}: @{@qcode{"direct"}@} | @qcode{"scaled"}



@anchor{XREFimagechildren}
@prindex image children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
@code{children} is unused.


@anchor{XREFimageclipping}
@prindex image clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the image is clipped in its parent axes limits.


@anchor{XREFimagecreatefcn}
@prindex image createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after image has been created.  Function is set by using default property on root object, e.g., @code{set (groot, "defaultimagecreatefcn", 'disp ("image created!")')}.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFimagedeletefcn}
@prindex image deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before image is deleted.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFimagehandlevisibility}
@prindex image handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the image's handle is not visible in its parent's "children" property.


@anchor{XREFimagehittest}
@prindex image hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether image processes mouse events or passes them to ancestors of the object.  When enabled, the object may respond to mouse clicks by evaluating the @qcode{"buttondownfcn"}, showing the uicontextmenu, and eventually becoming the root @qcode{"currentobject"}.  This property is only relevant when the object can accept mouse clicks which is determined by the @qcode{"pickableparts"} property.  @xref{XREFimagepickableparts, , @w{pickableparts property}}.


@anchor{XREFimageinterruptible}
@prindex image interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether this object's callback functions may be interrupted by other callbacks.  By default @code{interruptible} is @qcode{"on"} and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, @code{getframe} or @code{pause} functions are eventually interrupted.
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFimageparent}
@prindex image parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.


@anchor{XREFimagepickableparts}
@prindex image pickableparts
@item @code{pickableparts}: @qcode{"all"} | @qcode{"none"} | @{@qcode{"visible"}@}
Specify whether image will accept mouse clicks.  By default, @code{pickableparts} is @qcode{"visible"} and only visible parts of the image or its children may react to mouse clicks.  When @code{pickableparts} is @qcode{"all"} both visible and invisible parts (or children) may react to mouse clicks.  When @code{pickableparts} is @qcode{"none"} mouse clicks on the object are ignored and transmitted to any objects underneath this one.  When an object is configured to accept mouse clicks the @qcode{"hittest"} property will determine how they are processed.  @xref{XREFimagehittest, , @w{hittest property}}.


@anchor{XREFimageselected}
@prindex image selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFimageselectionhighlight}
@prindex image selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFimagetag}
@prindex image tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFimagetype}
@prindex image type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"image"}


@anchor{XREFimageuicontextmenu}
@prindex image uicontextmenu
@item @code{uicontextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this image object.


@anchor{XREFimageuserdata}
@prindex image userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.


@anchor{XREFimagevisible}
@prindex image visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the image is not rendered on screen.


@anchor{XREFimagexdata}
@prindex image xdata
@item @code{xdata}: two-element vector, def. @code{[1   64]}
Two-element vector @code{[xmin xmax]} specifying the x coordinates of the first and last columns of the image.

Setting @code{xdata} to the empty matrix ([]) will restore the default value of @code{[1 columns(image)]}.


@anchor{XREFimageydata}
@prindex image ydata
@item @code{ydata}: two-element vector, def. @code{[1   64]}
Two-element vector @code{[ymin ymax]} specifying the y coordinates of the first and last rows of the image.

Setting @code{ydata} to the empty matrix ([]) will restore the default value of @code{[1 rows(image)]}.

@end table